
vrs_cv5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001104  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001240  08001240  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001240  08001240  00011240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001244  08001244  00011244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08001248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  2000001c  08001264  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000038  08001264  00020038  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003d97  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ba1  00000000  00000000  00023ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000580  00000000  00000000  00024980  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e8  00000000  00000000  00024f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001e1f  00000000  00000000  000253e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001c20  00000000  00000000  00027207  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00028e27  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001670  00000000  00000000  00028ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002a518  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000001c 	.word	0x2000001c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001228 	.word	0x08001228

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000020 	.word	0x20000020
 8000178:	08001228 	.word	0x08001228

0800017c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
  *                                0 bits for subpriority.
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000184:	4a05      	ldr	r2, [pc, #20]	; (800019c <NVIC_PriorityGroupConfig+0x20>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800018c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000190:	60d3      	str	r3, [r2, #12]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	e000ed00 	.word	0xe000ed00

080001a0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b085      	sub	sp, #20
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001a8:	2300      	movs	r3, #0
 80001aa:	73fb      	strb	r3, [r7, #15]
 80001ac:	2300      	movs	r3, #0
 80001ae:	73bb      	strb	r3, [r7, #14]
 80001b0:	230f      	movs	r3, #15
 80001b2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	78db      	ldrb	r3, [r3, #3]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d038      	beq.n	800022e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001bc:	4b26      	ldr	r3, [pc, #152]	; (8000258 <NVIC_Init+0xb8>)
 80001be:	68db      	ldr	r3, [r3, #12]
 80001c0:	43db      	mvns	r3, r3
 80001c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001c6:	0a1b      	lsrs	r3, r3, #8
 80001c8:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001ca:	7bfb      	ldrb	r3, [r7, #15]
 80001cc:	f1c3 0304 	rsb	r3, r3, #4
 80001d0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001d2:	7b7a      	ldrb	r2, [r7, #13]
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	fa42 f303 	asr.w	r3, r2, r3
 80001da:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	785b      	ldrb	r3, [r3, #1]
 80001e0:	461a      	mov	r2, r3
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	fa02 f303 	lsl.w	r3, r2, r3
 80001e8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	789a      	ldrb	r2, [r3, #2]
 80001ee:	7b7b      	ldrb	r3, [r7, #13]
 80001f0:	4013      	ands	r3, r2
 80001f2:	b2da      	uxtb	r2, r3
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	4313      	orrs	r3, r2
 80001f8:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001fa:	7bfb      	ldrb	r3, [r7, #15]
 80001fc:	011b      	lsls	r3, r3, #4
 80001fe:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000200:	4a16      	ldr	r2, [pc, #88]	; (800025c <NVIC_Init+0xbc>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	4413      	add	r3, r2
 8000208:	7bfa      	ldrb	r2, [r7, #15]
 800020a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <NVIC_Init+0xbc>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	b2db      	uxtb	r3, r3
 8000218:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	f003 031f 	and.w	r3, r3, #31
 8000222:	2101      	movs	r1, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000228:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022c:	e00f      	b.n	800024e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800022e:	490b      	ldr	r1, [pc, #44]	; (800025c <NVIC_Init+0xbc>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	095b      	lsrs	r3, r3, #5
 8000236:	b2db      	uxtb	r3, r3
 8000238:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	f003 031f 	and.w	r3, r3, #31
 8000242:	2201      	movs	r2, #1
 8000244:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000246:	f100 0320 	add.w	r3, r0, #32
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	e000ed00 	.word	0xe000ed00
 800025c:	e000e100 	.word	0xe000e100

08000260 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800027e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000282:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	791b      	ldrb	r3, [r3, #4]
 8000288:	021a      	lsls	r2, r3, #8
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4313      	orrs	r3, r2
 8000290:	68fa      	ldr	r2, [r7, #12]
 8000292:	4313      	orrs	r3, r2
 8000294:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002a2:	68fa      	ldr	r2, [r7, #12]
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <ADC_Init+0xa4>)
 80002a6:	4013      	ands	r3, r2
 80002a8:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	691a      	ldr	r2, [r3, #16]
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80002b8:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	795b      	ldrb	r3, [r3, #5]
 80002be:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80002c0:	4313      	orrs	r3, r2
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	4313      	orrs	r3, r2
 80002c6:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	68fa      	ldr	r2, [r7, #12]
 80002cc:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 80002da:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	7d1b      	ldrb	r3, [r3, #20]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	7afb      	ldrb	r3, [r7, #11]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80002ea:	7afb      	ldrb	r3, [r7, #11]
 80002ec:	051b      	lsls	r3, r3, #20
 80002ee:	68fa      	ldr	r2, [r7, #12]
 80002f0:	4313      	orrs	r3, r2
 80002f2:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80002fa:	bf00      	nop
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	c0fff7fd 	.word	0xc0fff7fd

08000308 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2200      	movs	r2, #0
 800031a:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2200      	movs	r2, #0
 8000320:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800032e:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2201      	movs	r2, #1
 800033a:	751a      	strb	r2, [r3, #20]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop

08000348 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	460b      	mov	r3, r1
 8000352:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000354:	78fb      	ldrb	r3, [r7, #3]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d006      	beq.n	8000368 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	689b      	ldr	r3, [r3, #8]
 800035e:	f043 0201 	orr.w	r2, r3, #1
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000366:	e005      	b.n	8000374 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f023 0201 	bic.w	r2, r3, #1
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	609a      	str	r2, [r3, #8]
  }
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	4608      	mov	r0, r1
 800038a:	4611      	mov	r1, r2
 800038c:	461a      	mov	r2, r3
 800038e:	4603      	mov	r3, r0
 8000390:	70fb      	strb	r3, [r7, #3]
 8000392:	460b      	mov	r3, r1
 8000394:	70bb      	strb	r3, [r7, #2]
 8000396:	4613      	mov	r3, r2
 8000398:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	2300      	movs	r3, #0
 80003a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 80003a2:	78fb      	ldrb	r3, [r7, #3]
 80003a4:	2b1d      	cmp	r3, #29
 80003a6:	d923      	bls.n	80003f0 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80003ac:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 80003ae:	78fb      	ldrb	r3, [r7, #3]
 80003b0:	f1a3 021e 	sub.w	r2, r3, #30
 80003b4:	4613      	mov	r3, r2
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	4413      	add	r3, r2
 80003ba:	2207      	movs	r2, #7
 80003bc:	fa02 f303 	lsl.w	r3, r2, r3
 80003c0:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	43db      	mvns	r3, r3
 80003c6:	68fa      	ldr	r2, [r7, #12]
 80003c8:	4013      	ands	r3, r2
 80003ca:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 80003cc:	7879      	ldrb	r1, [r7, #1]
 80003ce:	78fb      	ldrb	r3, [r7, #3]
 80003d0:	f1a3 021e 	sub.w	r2, r3, #30
 80003d4:	4613      	mov	r3, r2
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	4413      	add	r3, r2
 80003da:	fa01 f303 	lsl.w	r3, r1, r3
 80003de:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	4313      	orrs	r3, r2
 80003e6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80003ee:	e06c      	b.n	80004ca <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 80003f0:	78fb      	ldrb	r3, [r7, #3]
 80003f2:	2b13      	cmp	r3, #19
 80003f4:	d923      	bls.n	800043e <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	68db      	ldr	r3, [r3, #12]
 80003fa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 80003fc:	78fb      	ldrb	r3, [r7, #3]
 80003fe:	f1a3 0214 	sub.w	r2, r3, #20
 8000402:	4613      	mov	r3, r2
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	4413      	add	r3, r2
 8000408:	2207      	movs	r2, #7
 800040a:	fa02 f303 	lsl.w	r3, r2, r3
 800040e:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	43db      	mvns	r3, r3
 8000414:	68fa      	ldr	r2, [r7, #12]
 8000416:	4013      	ands	r3, r2
 8000418:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 800041a:	7879      	ldrb	r1, [r7, #1]
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	f1a3 0214 	sub.w	r2, r3, #20
 8000422:	4613      	mov	r3, r2
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	4413      	add	r3, r2
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	4313      	orrs	r3, r2
 8000434:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	68fa      	ldr	r2, [r7, #12]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	e045      	b.n	80004ca <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 800043e:	78fb      	ldrb	r3, [r7, #3]
 8000440:	2b09      	cmp	r3, #9
 8000442:	d923      	bls.n	800048c <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	691b      	ldr	r3, [r3, #16]
 8000448:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 800044a:	78fb      	ldrb	r3, [r7, #3]
 800044c:	f1a3 020a 	sub.w	r2, r3, #10
 8000450:	4613      	mov	r3, r2
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	4413      	add	r3, r2
 8000456:	2207      	movs	r2, #7
 8000458:	fa02 f303 	lsl.w	r3, r2, r3
 800045c:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	43db      	mvns	r3, r3
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	4013      	ands	r3, r2
 8000466:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000468:	7879      	ldrb	r1, [r7, #1]
 800046a:	78fb      	ldrb	r3, [r7, #3]
 800046c:	f1a3 020a 	sub.w	r2, r3, #10
 8000470:	4613      	mov	r3, r2
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	4413      	add	r3, r2
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	4313      	orrs	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	68fa      	ldr	r2, [r7, #12]
 8000488:	611a      	str	r2, [r3, #16]
 800048a:	e01e      	b.n	80004ca <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 8000492:	78fa      	ldrb	r2, [r7, #3]
 8000494:	4613      	mov	r3, r2
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	4413      	add	r3, r2
 800049a:	2207      	movs	r2, #7
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	43db      	mvns	r3, r3
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	4013      	ands	r3, r2
 80004aa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80004ac:	7879      	ldrb	r1, [r7, #1]
 80004ae:	78fa      	ldrb	r2, [r7, #3]
 80004b0:	4613      	mov	r3, r2
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	4413      	add	r3, r2
 80004b6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ba:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80004ca:	78bb      	ldrb	r3, [r7, #2]
 80004cc:	2b06      	cmp	r3, #6
 80004ce:	d821      	bhi.n	8000514 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 80004d6:	78bb      	ldrb	r3, [r7, #2]
 80004d8:	1e5a      	subs	r2, r3, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	4413      	add	r3, r2
 80004e0:	221f      	movs	r2, #31
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	43db      	mvns	r3, r3
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	4013      	ands	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80004f2:	78f9      	ldrb	r1, [r7, #3]
 80004f4:	78bb      	ldrb	r3, [r7, #2]
 80004f6:	1e5a      	subs	r2, r3, #1
 80004f8:	4613      	mov	r3, r2
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4413      	add	r3, r2
 80004fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000502:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4313      	orrs	r3, r2
 800050a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	68fa      	ldr	r2, [r7, #12]
 8000510:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000512:	e095      	b.n	8000640 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000514:	78bb      	ldrb	r3, [r7, #2]
 8000516:	2b0c      	cmp	r3, #12
 8000518:	d821      	bhi.n	800055e <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800051e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 8000520:	78bb      	ldrb	r3, [r7, #2]
 8000522:	1fda      	subs	r2, r3, #7
 8000524:	4613      	mov	r3, r2
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	4413      	add	r3, r2
 800052a:	221f      	movs	r2, #31
 800052c:	fa02 f303 	lsl.w	r3, r2, r3
 8000530:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	43db      	mvns	r3, r3
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	4013      	ands	r3, r2
 800053a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800053c:	78f9      	ldrb	r1, [r7, #3]
 800053e:	78bb      	ldrb	r3, [r7, #2]
 8000540:	1fda      	subs	r2, r3, #7
 8000542:	4613      	mov	r3, r2
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4413      	add	r3, r2
 8000548:	fa01 f303 	lsl.w	r3, r1, r3
 800054c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	4313      	orrs	r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800055c:	e070      	b.n	8000640 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 800055e:	78bb      	ldrb	r3, [r7, #2]
 8000560:	2b12      	cmp	r3, #18
 8000562:	d823      	bhi.n	80005ac <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000568:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 800056a:	78bb      	ldrb	r3, [r7, #2]
 800056c:	f1a3 020d 	sub.w	r2, r3, #13
 8000570:	4613      	mov	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4413      	add	r3, r2
 8000576:	221f      	movs	r2, #31
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	43db      	mvns	r3, r3
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	4013      	ands	r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000588:	78f9      	ldrb	r1, [r7, #3]
 800058a:	78bb      	ldrb	r3, [r7, #2]
 800058c:	f1a3 020d 	sub.w	r2, r3, #13
 8000590:	4613      	mov	r3, r2
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4413      	add	r3, r2
 8000596:	fa01 f303 	lsl.w	r3, r1, r3
 800059a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80005aa:	e049      	b.n	8000640 <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 80005ac:	78bb      	ldrb	r3, [r7, #2]
 80005ae:	2b18      	cmp	r3, #24
 80005b0:	d823      	bhi.n	80005fa <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 80005b8:	78bb      	ldrb	r3, [r7, #2]
 80005ba:	f1a3 0213 	sub.w	r2, r3, #19
 80005be:	4613      	mov	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	4413      	add	r3, r2
 80005c4:	221f      	movs	r2, #31
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	43db      	mvns	r3, r3
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	4013      	ands	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 80005d6:	78f9      	ldrb	r1, [r7, #3]
 80005d8:	78bb      	ldrb	r3, [r7, #2]
 80005da:	f1a3 0213 	sub.w	r2, r3, #19
 80005de:	4613      	mov	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	fa01 f303 	lsl.w	r3, r1, r3
 80005e8:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80005f8:	e022      	b.n	8000640 <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 8000600:	78bb      	ldrb	r3, [r7, #2]
 8000602:	f1a3 0219 	sub.w	r2, r3, #25
 8000606:	4613      	mov	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4413      	add	r3, r2
 800060c:	221f      	movs	r2, #31
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	43db      	mvns	r3, r3
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	4013      	ands	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 800061e:	78f9      	ldrb	r1, [r7, #3]
 8000620:	78bb      	ldrb	r3, [r7, #2]
 8000622:	f1a3 0219 	sub.w	r2, r3, #25
 8000626:	4613      	mov	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	fa01 f303 	lsl.w	r3, r1, r3
 8000630:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4313      	orrs	r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	609a      	str	r2, [r3, #8]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000678:	b29b      	uxth	r3, r3
}
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	807b      	strh	r3, [r7, #2]
 8000690:	4613      	mov	r3, r2
 8000692:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000698:	887b      	ldrh	r3, [r7, #2]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 800069e:	2201      	movs	r2, #1
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 80006a8:	787b      	ldrb	r3, [r7, #1]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d006      	beq.n	80006bc <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	431a      	orrs	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 80006ba:	e006      	b.n	80006ca <ADC_ITConfig+0x46>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	43db      	mvns	r3, r3
 80006c4:	401a      	ands	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	605a      	str	r2, [r3, #4]
  }
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	887b      	ldrh	r3, [r7, #2]
 80006ea:	4013      	ands	r3, r2
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80006f0:	2301      	movs	r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	e001      	b.n	80006fa <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000708:	b480      	push	{r7}
 800070a:	b087      	sub	sp, #28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	e07e      	b.n	8000822 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000724:	2201      	movs	r2, #1
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	4013      	ands	r3, r2
 8000736:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	429a      	cmp	r2, r3
 800073e:	d16d      	bne.n	800081c <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	2103      	movs	r1, #3
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43db      	mvns	r3, r3
 8000750:	401a      	ands	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	4619      	mov	r1, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	431a      	orrs	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d003      	beq.n	800077e <GPIO_Init+0x76>
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	2b02      	cmp	r3, #2
 800077c:	d136      	bne.n	80007ec <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	689a      	ldr	r2, [r3, #8]
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	2103      	movs	r1, #3
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	43db      	mvns	r3, r3
 800078e:	401a      	ands	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	689a      	ldr	r2, [r3, #8]
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	4619      	mov	r1, r3
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	431a      	orrs	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	889b      	ldrh	r3, [r3, #4]
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	2101      	movs	r1, #1
 80007b8:	fa01 f303 	lsl.w	r3, r1, r3
 80007bc:	b29b      	uxth	r3, r3
 80007be:	43db      	mvns	r3, r3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	4013      	ands	r3, r2
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	889b      	ldrh	r3, [r3, #4]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	799b      	ldrb	r3, [r3, #6]
 80007d6:	4619      	mov	r1, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	fa01 f303 	lsl.w	r3, r1, r3
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	68da      	ldr	r2, [r3, #12]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	2103      	movs	r1, #3
 80007f8:	fa01 f303 	lsl.w	r3, r1, r3
 80007fc:	43db      	mvns	r3, r3
 80007fe:	401a      	ands	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68da      	ldr	r2, [r3, #12]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	79db      	ldrb	r3, [r3, #7]
 800080c:	4619      	mov	r1, r3
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	431a      	orrs	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	3301      	adds	r3, #1
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	2b0f      	cmp	r3, #15
 8000826:	f67f af7d 	bls.w	8000724 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800082a:	bf00      	nop
 800082c:	371c      	adds	r7, #28
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	887a      	ldrh	r2, [r7, #2]
 8000844:	835a      	strh	r2, [r3, #26]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	8a9b      	ldrh	r3, [r3, #20]
 8000860:	b29a      	uxth	r2, r3
 8000862:	887b      	ldrh	r3, [r7, #2]
 8000864:	4053      	eors	r3, r2
 8000866:	b29a      	uxth	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	829a      	strh	r2, [r3, #20]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop

08000878 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000882:	4a04      	ldr	r2, [pc, #16]	; (8000894 <RCC_HSICmd+0x1c>)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	42470000 	.word	0x42470000

08000898 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008b8:	4b5f      	ldr	r3, [pc, #380]	; (8000a38 <RCC_GetClocksFreq+0x1a0>)
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f003 030c 	and.w	r3, r3, #12
 80008c0:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	2b0c      	cmp	r3, #12
 80008c6:	d865      	bhi.n	8000994 <RCC_GetClocksFreq+0xfc>
 80008c8:	a201      	add	r2, pc, #4	; (adr r2, 80008d0 <RCC_GetClocksFreq+0x38>)
 80008ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ce:	bf00      	nop
 80008d0:	08000905 	.word	0x08000905
 80008d4:	08000995 	.word	0x08000995
 80008d8:	08000995 	.word	0x08000995
 80008dc:	08000995 	.word	0x08000995
 80008e0:	08000925 	.word	0x08000925
 80008e4:	08000995 	.word	0x08000995
 80008e8:	08000995 	.word	0x08000995
 80008ec:	08000995 	.word	0x08000995
 80008f0:	0800092d 	.word	0x0800092d
 80008f4:	08000995 	.word	0x08000995
 80008f8:	08000995 	.word	0x08000995
 80008fc:	08000995 	.word	0x08000995
 8000900:	08000935 	.word	0x08000935
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000904:	4b4c      	ldr	r3, [pc, #304]	; (8000a38 <RCC_GetClocksFreq+0x1a0>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800090c:	0b5b      	lsrs	r3, r3, #13
 800090e:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	3301      	adds	r3, #1
 8000914:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	601a      	str	r2, [r3, #0]
      break;
 8000922:	e047      	b.n	80009b4 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a45      	ldr	r2, [pc, #276]	; (8000a3c <RCC_GetClocksFreq+0x1a4>)
 8000928:	601a      	str	r2, [r3, #0]
      break;
 800092a:	e043      	b.n	80009b4 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a44      	ldr	r2, [pc, #272]	; (8000a40 <RCC_GetClocksFreq+0x1a8>)
 8000930:	601a      	str	r2, [r3, #0]
      break;
 8000932:	e03f      	b.n	80009b4 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000934:	4b40      	ldr	r3, [pc, #256]	; (8000a38 <RCC_GetClocksFreq+0x1a0>)
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800093c:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800093e:	4b3e      	ldr	r3, [pc, #248]	; (8000a38 <RCC_GetClocksFreq+0x1a0>)
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000946:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	0c9b      	lsrs	r3, r3, #18
 800094c:	4a3d      	ldr	r2, [pc, #244]	; (8000a44 <RCC_GetClocksFreq+0x1ac>)
 800094e:	5cd3      	ldrb	r3, [r2, r3]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	0d9b      	lsrs	r3, r3, #22
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800095c:	4b36      	ldr	r3, [pc, #216]	; (8000a38 <RCC_GetClocksFreq+0x1a0>)
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000964:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d109      	bne.n	8000980 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	4a33      	ldr	r2, [pc, #204]	; (8000a3c <RCC_GetClocksFreq+0x1a4>)
 8000970:	fb02 f203 	mul.w	r2, r2, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fbb2 f2f3 	udiv	r2, r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 800097e:	e019      	b.n	80009b4 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	4a2f      	ldr	r2, [pc, #188]	; (8000a40 <RCC_GetClocksFreq+0x1a8>)
 8000984:	fb02 f203 	mul.w	r2, r2, r3
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	fbb2 f2f3 	udiv	r2, r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
      }
      break;
 8000992:	e00f      	b.n	80009b4 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <RCC_GetClocksFreq+0x1a0>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800099c:	0b5b      	lsrs	r3, r3, #13
 800099e:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	3301      	adds	r3, #1
 80009a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	461a      	mov	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
      break;
 80009b2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009b4:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <RCC_GetClocksFreq+0x1a0>)
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009bc:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	091b      	lsrs	r3, r3, #4
 80009c2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 80009c4:	4a20      	ldr	r2, [pc, #128]	; (8000a48 <RCC_GetClocksFreq+0x1b0>)
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	40da      	lsrs	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <RCC_GetClocksFreq+0x1a0>)
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80009e4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80009ec:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <RCC_GetClocksFreq+0x1b0>)
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	40da      	lsrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <RCC_GetClocksFreq+0x1a0>)
 8000a06:	689b      	ldr	r3, [r3, #8]
 8000a08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000a0c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	0adb      	lsrs	r3, r3, #11
 8000a12:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000a14:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <RCC_GetClocksFreq+0x1b0>)
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	4413      	add	r3, r2
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	40da      	lsrs	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	60da      	str	r2, [r3, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3724      	adds	r7, #36	; 0x24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	00f42400 	.word	0x00f42400
 8000a40:	007a1200 	.word	0x007a1200
 8000a44:	20000000 	.word	0x20000000
 8000a48:	2000000c 	.word	0x2000000c

08000a4c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a58:	78fb      	ldrb	r3, [r7, #3]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d006      	beq.n	8000a6c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000a5e:	4909      	ldr	r1, [pc, #36]	; (8000a84 <RCC_AHBPeriphClockCmd+0x38>)
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <RCC_AHBPeriphClockCmd+0x38>)
 8000a62:	69da      	ldr	r2, [r3, #28]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000a6a:	e006      	b.n	8000a7a <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000a6c:	4905      	ldr	r1, [pc, #20]	; (8000a84 <RCC_AHBPeriphClockCmd+0x38>)
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <RCC_AHBPeriphClockCmd+0x38>)
 8000a70:	69da      	ldr	r2, [r3, #28]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	4013      	ands	r3, r2
 8000a78:	61cb      	str	r3, [r1, #28]
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	40023800 	.word	0x40023800

08000a88 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d006      	beq.n	8000aa8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000a9a:	4909      	ldr	r1, [pc, #36]	; (8000ac0 <RCC_APB2PeriphClockCmd+0x38>)
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <RCC_APB2PeriphClockCmd+0x38>)
 8000a9e:	6a1a      	ldr	r2, [r3, #32]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000aa6:	e006      	b.n	8000ab6 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000aa8:	4905      	ldr	r1, [pc, #20]	; (8000ac0 <RCC_APB2PeriphClockCmd+0x38>)
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <RCC_APB2PeriphClockCmd+0x38>)
 8000aac:	6a1a      	ldr	r2, [r3, #32]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	620b      	str	r3, [r1, #32]
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	095b      	lsrs	r3, r3, #5
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d103      	bne.n	8000af0 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <RCC_GetFlagStatus+0x60>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	e002      	b.n	8000af6 <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <RCC_GetFlagStatus+0x60>)
 8000af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af4:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	f003 031f 	and.w	r3, r3, #31
 8000afc:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	fa22 f303 	lsr.w	r3, r2, r3
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d002      	beq.n	8000b14 <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	74fb      	strb	r3, [r7, #19]
 8000b12:	e001      	b.n	8000b18 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000b18:	7cfb      	ldrb	r3, [r7, #19]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	371c      	adds	r7, #28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40023800 	.word	0x40023800

08000b28 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	8a1b      	ldrh	r3, [r3, #16]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	88db      	ldrh	r3, [r3, #6]
 8000b56:	461a      	mov	r2, r3
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	899b      	ldrh	r3, [r3, #12]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000b74:	f023 030c 	bic.w	r3, r3, #12
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	889a      	ldrh	r2, [r3, #4]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	891b      	ldrh	r3, [r3, #8]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	4313      	orrs	r3, r2
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	8a9b      	ldrh	r3, [r3, #20]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	899b      	ldrh	r3, [r3, #12]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe66 	bl	8000898 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a2e      	ldr	r2, [pc, #184]	; (8000c88 <USART_Init+0x160>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d102      	bne.n	8000bda <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	623b      	str	r3, [r7, #32]
 8000bd8:	e001      	b.n	8000bde <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	899b      	ldrh	r3, [r3, #12]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	da0c      	bge.n	8000c04 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000bea:	6a3a      	ldr	r2, [r7, #32]
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	009a      	lsls	r2, r3, #2
 8000bf4:	441a      	add	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c00:	61fb      	str	r3, [r7, #28]
 8000c02:	e00b      	b.n	8000c1c <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000c04:	6a3a      	ldr	r2, [r7, #32]
 8000c06:	4613      	mov	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	009a      	lsls	r2, r3, #2
 8000c0e:	441a      	add	r2, r3
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <USART_Init+0x164>)
 8000c20:	fba2 2303 	umull	r2, r3, r2, r3
 8000c24:	095b      	lsrs	r3, r3, #5
 8000c26:	011b      	lsls	r3, r3, #4
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	091b      	lsrs	r3, r3, #4
 8000c2e:	2264      	movs	r2, #100	; 0x64
 8000c30:	fb02 f303 	mul.w	r3, r2, r3
 8000c34:	69fa      	ldr	r2, [r7, #28]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	899b      	ldrh	r3, [r3, #12]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	da0c      	bge.n	8000c60 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	3332      	adds	r3, #50	; 0x32
 8000c4c:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <USART_Init+0x164>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	095b      	lsrs	r3, r3, #5
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c5e:	e00b      	b.n	8000c78 <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	011b      	lsls	r3, r3, #4
 8000c64:	3332      	adds	r3, #50	; 0x32
 8000c66:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <USART_Init+0x164>)
 8000c68:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6c:	095b      	lsrs	r3, r3, #5
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c74:	4313      	orrs	r3, r2
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	811a      	strh	r2, [r3, #8]
}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40013800 	.word	0x40013800
 8000c8c:	51eb851f 	.word	0x51eb851f

08000c90 <main>:
#include "stm32l1xx.h"
#include "vrs_cv5.h"


int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
	NVIC_init();
 8000c96:	f000 f983 	bl	8000fa0 <NVIC_init>
	adc_init();
 8000c9a:	f000 f925 	bl	8000ee8 <adc_init>
	USART_init();
 8000c9e:	f000 f9a5 	bl	8000fec <USART_init>

	int i = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
	while (1)
	{
		i++;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
	}
 8000cac:	e7fb      	b.n	8000ca6 <main+0x16>
 8000cae:	bf00      	nop

08000cb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cb4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cb6:	e003      	b.n	8000cc0 <LoopCopyDataInit>

08000cb8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000cba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000cbc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cbe:	3104      	adds	r1, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000cc4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cc6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cc8:	d3f6      	bcc.n	8000cb8 <CopyDataInit>
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000ccc:	e002      	b.n	8000cd4 <LoopFillZerobss>

08000cce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000cd0:	f842 3b04 	str.w	r3, [r2], #4

08000cd4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000cd6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000cd8:	d3f9      	bcc.n	8000cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cda:	f000 f841 	bl	8000d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f000 fa7d 	bl	80011dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce2:	f7ff ffd5 	bl	8000c90 <main>
  bx lr
 8000ce6:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ce8:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000cec:	08001248 	.word	0x08001248
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000cf4:	2000001c 	.word	0x2000001c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000cf8:	2000001c 	.word	0x2000001c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000cfc:	20000038 	.word	0x20000038

08000d00 <AES_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <AES_IRQHandler>
	...

08000d04 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000d14:	e7fe      	b.n	8000d14 <HardFault_Handler+0x4>
 8000d16:	bf00      	nop

08000d18 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>
 8000d1e:	bf00      	nop

08000d20 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000d24:	e7fe      	b.n	8000d24 <BusFault_Handler+0x4>
 8000d26:	bf00      	nop

08000d28 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>
 8000d2e:	bf00      	nop

08000d30 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000d64:	4a15      	ldr	r2, [pc, #84]	; (8000dbc <SystemInit+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <SystemInit+0x5c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6e:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000d70:	4912      	ldr	r1, [pc, #72]	; (8000dbc <SystemInit+0x5c>)
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <SystemInit+0x5c>)
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <SystemInit+0x60>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000d7c:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <SystemInit+0x5c>)
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <SystemInit+0x5c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000d86:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000d8a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <SystemInit+0x5c>)
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <SystemInit+0x5c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d96:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000d98:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <SystemInit+0x5c>)
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <SystemInit+0x5c>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000da2:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SystemInit+0x5c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000daa:	f000 f80d 	bl	8000dc8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SystemInit+0x64>)
 8000db0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000db4:	609a      	str	r2, [r3, #8]
#endif
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	88ffc00c 	.word	0x88ffc00c
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000dd6:	4a41      	ldr	r2, [pc, #260]	; (8000edc <SetSysClock+0x114>)
 8000dd8:	4b40      	ldr	r3, [pc, #256]	; (8000edc <SetSysClock+0x114>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000de2:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <SetSysClock+0x114>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3301      	adds	r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d103      	bne.n	8000e00 <SetSysClock+0x38>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000dfe:	d1f0      	bne.n	8000de2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000e00:	4b36      	ldr	r3, [pc, #216]	; (8000edc <SetSysClock+0x114>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	e001      	b.n	8000e16 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d15a      	bne.n	8000ed2 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8000e1c:	4a30      	ldr	r2, [pc, #192]	; (8000ee0 <SetSysClock+0x118>)
 8000e1e:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <SetSysClock+0x118>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000e28:	4a2d      	ldr	r2, [pc, #180]	; (8000ee0 <SetSysClock+0x118>)
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <SetSysClock+0x118>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8000e34:	4a2a      	ldr	r2, [pc, #168]	; (8000ee0 <SetSysClock+0x118>)
 8000e36:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <SetSysClock+0x118>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000e40:	4a26      	ldr	r2, [pc, #152]	; (8000edc <SetSysClock+0x114>)
 8000e42:	4b26      	ldr	r3, [pc, #152]	; (8000edc <SetSysClock+0x114>)
 8000e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8000e4c:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <SetSysClock+0x11c>)
 8000e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e52:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8000e54:	bf00      	nop
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <SetSysClock+0x11c>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f9      	bne.n	8000e56 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000e62:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <SetSysClock+0x114>)
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <SetSysClock+0x114>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <SetSysClock+0x114>)
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <SetSysClock+0x114>)
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000e72:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <SetSysClock+0x114>)
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <SetSysClock+0x114>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <SetSysClock+0x114>)
 8000e7c:	4b17      	ldr	r3, [pc, #92]	; (8000edc <SetSysClock+0x114>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000e84:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8000e86:	4a15      	ldr	r2, [pc, #84]	; (8000edc <SetSysClock+0x114>)
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <SetSysClock+0x114>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8000e90:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <SetSysClock+0x114>)
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <SetSysClock+0x114>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e9c:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e9e:	bf00      	nop
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <SetSysClock+0x114>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f9      	beq.n	8000ea0 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <SetSysClock+0x114>)
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <SetSysClock+0x114>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f023 0303 	bic.w	r3, r3, #3
 8000eb6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <SetSysClock+0x114>)
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <SetSysClock+0x114>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f043 0303 	orr.w	r3, r3, #3
 8000ec2:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000ec4:	bf00      	nop
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <SetSysClock+0x114>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b0c      	cmp	r3, #12
 8000ed0:	d1f9      	bne.n	8000ec6 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40023c00 	.word	0x40023c00
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <adc_init>:
#include "vrs_cv5.h"
#include <stddef.h>
#include "stm32l1xx.h"

void adc_init(void)			// inicalizujem ADC a GPIO
  {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
  	GPIO_InitTypeDef GPIO_InitStructure;
  	ADC_InitTypeDef ADC_InitStructure;

  	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000eee:	2101      	movs	r1, #1
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f7ff fdab 	bl	8000a4c <RCC_AHBPeriphClockCmd>
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 ;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000efa:	2303      	movs	r3, #3
 8000efc:	773b      	strb	r3, [r7, #28]
  	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8000efe:	2300      	movs	r3, #0
 8000f00:	77fb      	strb	r3, [r7, #31]
  	// LEDka//
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 ;
 8000f02:	2320      	movs	r3, #32
 8000f04:	61bb      	str	r3, [r7, #24]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000f06:	2301      	movs	r3, #1
 8000f08:	773b      	strb	r3, [r7, #28]
  	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	77bb      	strb	r3, [r7, #30]
  	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	77fb      	strb	r3, [r7, #31]
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000f12:	2303      	movs	r3, #3
 8000f14:	777b      	strb	r3, [r7, #29]
  	////
  	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f16:	f107 0318 	add.w	r3, r7, #24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481e      	ldr	r0, [pc, #120]	; (8000f98 <adc_init+0xb0>)
 8000f1e:	f7ff fbf3 	bl	8000708 <GPIO_Init>
  	RCC_HSICmd(ENABLE);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f7ff fca8 	bl	8000878 <RCC_HSICmd>
  	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8000f28:	bf00      	nop
 8000f2a:	2021      	movs	r0, #33	; 0x21
 8000f2c:	f7ff fdca 	bl	8000ac4 <RCC_GetFlagStatus>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f9      	beq.n	8000f2a <adc_init+0x42>
  	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000f36:	2101      	movs	r1, #1
 8000f38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f3c:	f7ff fda4 	bl	8000a88 <RCC_APB2PeriphClockCmd>
  	ADC_StructInit(&ADC_InitStructure);
 8000f40:	463b      	mov	r3, r7
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff f9e0 	bl	8000308 <ADC_StructInit>
  	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	603b      	str	r3, [r7, #0]
  	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	717b      	strb	r3, [r7, #5]
  	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
  	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000f54:	2300      	movs	r3, #0
 8000f56:	613b      	str	r3, [r7, #16]
  	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	753b      	strb	r3, [r7, #20]
  	ADC_Init(ADC1, &ADC_InitStructure);
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480e      	ldr	r0, [pc, #56]	; (8000f9c <adc_init+0xb4>)
 8000f62:	f7ff f97d 	bl	8000260 <ADC_Init>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_16Cycles);
 8000f66:	2302      	movs	r3, #2
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <adc_init+0xb4>)
 8000f6e:	f7ff fa07 	bl	8000380 <ADC_RegularChannelConfig>
  	ADC_Cmd(ADC1, ENABLE);
 8000f72:	2101      	movs	r1, #1
 8000f74:	4809      	ldr	r0, [pc, #36]	; (8000f9c <adc_init+0xb4>)
 8000f76:	f7ff f9e7 	bl	8000348 <ADC_Cmd>
  	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET){}
 8000f7a:	bf00      	nop
 8000f7c:	2140      	movs	r1, #64	; 0x40
 8000f7e:	4807      	ldr	r0, [pc, #28]	; (8000f9c <adc_init+0xb4>)
 8000f80:	f7ff fba8 	bl	80006d4 <ADC_GetFlagStatus>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f8      	beq.n	8000f7c <adc_init+0x94>
  	ADC_SoftwareStartConv(ADC1);
 8000f8a:	4804      	ldr	r0, [pc, #16]	; (8000f9c <adc_init+0xb4>)
 8000f8c:	f7ff fb5e 	bl	800064c <ADC_SoftwareStartConv>
  }
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40012400 	.word	0x40012400

08000fa0 <NVIC_init>:

void NVIC_init(){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8000fa6:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8000faa:	f7ff f8e7 	bl	800017c <NVIC_PriorityGroupConfig>
  	NVIC_InitTypeDef NVIC_struktura;
  	NVIC_struktura.NVIC_IRQChannel = ADC1_IRQn;
 8000fae:	2312      	movs	r3, #18
 8000fb0:	713b      	strb	r3, [r7, #4]
  	NVIC_struktura.NVIC_IRQChannelPreemptionPriority = 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	717b      	strb	r3, [r7, #5]
  	NVIC_struktura.NVIC_IRQChannelSubPriority = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71bb      	strb	r3, [r7, #6]
  	NVIC_struktura.NVIC_IRQChannelCmd = ENABLE;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	71fb      	strb	r3, [r7, #7]
  	NVIC_Init(&NVIC_struktura);
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff f8ed 	bl	80001a0 <NVIC_Init>
  	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f240 2105 	movw	r1, #517	; 0x205
 8000fcc:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <NVIC_init+0x48>)
 8000fce:	f7ff fb59 	bl	8000684 <ADC_ITConfig>
  	ADC_ITConfig(ADC1, ADC_IT_OVR, ENABLE);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f242 011a 	movw	r1, #8218	; 0x201a
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <NVIC_init+0x48>)
 8000fda:	f7ff fb53 	bl	8000684 <ADC_ITConfig>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40012400 	.word	0x40012400

08000fec <USART_init>:

void USART_init(){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ff8:	f7ff fd46 	bl	8000a88 <RCC_APB2PeriphClockCmd>
	USART_InitTypeDef USART_struktura;
	USART_struktura.USART_BaudRate = 9600;
 8000ffc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001000:	603b      	str	r3, [r7, #0]
	USART_struktura.USART_WordLength = USART_WordLength_8b;
 8001002:	2300      	movs	r3, #0
 8001004:	80bb      	strh	r3, [r7, #4]
	USART_struktura.USART_StopBits = USART_StopBits_1;
 8001006:	2300      	movs	r3, #0
 8001008:	80fb      	strh	r3, [r7, #6]
	USART_struktura.USART_Parity = USART_Parity_No;
 800100a:	2300      	movs	r3, #0
 800100c:	813b      	strh	r3, [r7, #8]
	USART_struktura.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800100e:	2300      	movs	r3, #0
 8001010:	81bb      	strh	r3, [r7, #12]
	USART_struktura.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001012:	230c      	movs	r3, #12
 8001014:	817b      	strh	r3, [r7, #10]
	USART_Init(USART1, &USART_struktura);
 8001016:	463b      	mov	r3, r7
 8001018:	4619      	mov	r1, r3
 800101a:	4803      	ldr	r0, [pc, #12]	; (8001028 <USART_init+0x3c>)
 800101c:	f7ff fd84 	bl	8000b28 <USART_Init>
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40013800 	.word	0x40013800

0800102c <ADC1_IRQHandler>:

void ADC1_IRQHandler(){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	uint16_t AD_value;
	ADC_SoftwareStartConv(ADC1);
 8001032:	4829      	ldr	r0, [pc, #164]	; (80010d8 <ADC1_IRQHandler+0xac>)
 8001034:	f7ff fb0a 	bl	800064c <ADC_SoftwareStartConv>
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)){}
 8001038:	bf00      	nop
 800103a:	2102      	movs	r1, #2
 800103c:	4826      	ldr	r0, [pc, #152]	; (80010d8 <ADC1_IRQHandler+0xac>)
 800103e:	f7ff fb49 	bl	80006d4 <ADC_GetFlagStatus>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f8      	beq.n	800103a <ADC1_IRQHandler+0xe>
	AD_value=ADC_GetConversionValue(ADC1);
 8001048:	4823      	ldr	r0, [pc, #140]	; (80010d8 <ADC1_IRQHandler+0xac>)
 800104a:	f7ff fb0f 	bl	800066c <ADC_GetConversionValue>
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]

	if ((AD_value >= 1980) && (AD_value <= 2100)){
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	f240 72bb 	movw	r2, #1979	; 0x7bb
 8001058:	4293      	cmp	r3, r2
 800105a:	d908      	bls.n	800106e <ADC1_IRQHandler+0x42>
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	f640 0234 	movw	r2, #2100	; 0x834
 8001062:	4293      	cmp	r3, r2
 8001064:	d803      	bhi.n	800106e <ADC1_IRQHandler+0x42>
		blikamLEDku(1);
 8001066:	2001      	movs	r0, #1
 8001068:	f000 f838 	bl	80010dc <blikamLEDku>
 800106c:	e02f      	b.n	80010ce <ADC1_IRQHandler+0xa2>
	}
	else if ((AD_value >= 2800) && (AD_value <= 2940)){
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8001074:	d308      	bcc.n	8001088 <ADC1_IRQHandler+0x5c>
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	f640 327c 	movw	r2, #2940	; 0xb7c
 800107c:	4293      	cmp	r3, r2
 800107e:	d803      	bhi.n	8001088 <ADC1_IRQHandler+0x5c>
		blikamLEDku(2);
 8001080:	2002      	movs	r0, #2
 8001082:	f000 f82b 	bl	80010dc <blikamLEDku>
 8001086:	e022      	b.n	80010ce <ADC1_IRQHandler+0xa2>
	}
	else if ((AD_value >= 3440) && (AD_value <= 3480)){
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	f5b3 6f57 	cmp.w	r3, #3440	; 0xd70
 800108e:	d308      	bcc.n	80010a2 <ADC1_IRQHandler+0x76>
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	f640 5298 	movw	r2, #3480	; 0xd98
 8001096:	4293      	cmp	r3, r2
 8001098:	d803      	bhi.n	80010a2 <ADC1_IRQHandler+0x76>
		blikamLEDku(3);
 800109a:	2003      	movs	r0, #3
 800109c:	f000 f81e 	bl	80010dc <blikamLEDku>
 80010a0:	e015      	b.n	80010ce <ADC1_IRQHandler+0xa2>
	}
	else if ((AD_value >= 3640) && (AD_value <= 3680)){
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	f640 6237 	movw	r2, #3639	; 0xe37
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d907      	bls.n	80010bc <ADC1_IRQHandler+0x90>
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	f5b3 6f66 	cmp.w	r3, #3680	; 0xe60
 80010b2:	d803      	bhi.n	80010bc <ADC1_IRQHandler+0x90>
		blikamLEDku(4);
 80010b4:	2004      	movs	r0, #4
 80010b6:	f000 f811 	bl	80010dc <blikamLEDku>
 80010ba:	e008      	b.n	80010ce <ADC1_IRQHandler+0xa2>
	}
	else if ((AD_value >= 3900)){
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	f640 723b 	movw	r2, #3899	; 0xf3b
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d903      	bls.n	80010ce <ADC1_IRQHandler+0xa2>
		blikamLEDku(0);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f808 	bl	80010dc <blikamLEDku>
	}
}
 80010cc:	e7ff      	b.n	80010ce <ADC1_IRQHandler+0xa2>
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40012400 	.word	0x40012400

080010dc <blikamLEDku>:


void blikamLEDku(int tlacitko){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	int i, j;
	if (tlacitko == 0){
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d104      	bne.n	80010f4 <blikamLEDku+0x18>
		GPIO_ResetBits(GPIOA, GPIO_Pin_5);
 80010ea:	2120      	movs	r1, #32
 80010ec:	483a      	ldr	r0, [pc, #232]	; (80011d8 <blikamLEDku+0xfc>)
 80010ee:	f7ff fba1 	bl	8000834 <GPIO_ResetBits>
		for (i = 1; i <= 1000; i++){
			for (j = 1; j <= 1000; j++){
			}
		}
	}
}
 80010f2:	e06c      	b.n	80011ce <blikamLEDku+0xf2>
void blikamLEDku(int tlacitko){
	int i, j;
	if (tlacitko == 0){
		GPIO_ResetBits(GPIOA, GPIO_Pin_5);
	}
	else if (tlacitko == 1){
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d116      	bne.n	8001128 <blikamLEDku+0x4c>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 80010fa:	2120      	movs	r1, #32
 80010fc:	4836      	ldr	r0, [pc, #216]	; (80011d8 <blikamLEDku+0xfc>)
 80010fe:	f7ff fba7 	bl	8000850 <GPIO_ToggleBits>
		for (i = 1; i <= 200; i++){
 8001102:	2301      	movs	r3, #1
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	e00b      	b.n	8001120 <blikamLEDku+0x44>
			for (j = 1; j <= 200; j++){
 8001108:	2301      	movs	r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	e002      	b.n	8001114 <blikamLEDku+0x38>
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3301      	adds	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	2bc8      	cmp	r3, #200	; 0xc8
 8001118:	ddf9      	ble.n	800110e <blikamLEDku+0x32>
	if (tlacitko == 0){
		GPIO_ResetBits(GPIOA, GPIO_Pin_5);
	}
	else if (tlacitko == 1){
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
		for (i = 1; i <= 200; i++){
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3301      	adds	r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2bc8      	cmp	r3, #200	; 0xc8
 8001124:	ddf0      	ble.n	8001108 <blikamLEDku+0x2c>
		for (i = 1; i <= 1000; i++){
			for (j = 1; j <= 1000; j++){
			}
		}
	}
}
 8001126:	e052      	b.n	80011ce <blikamLEDku+0xf2>
		for (i = 1; i <= 200; i++){
			for (j = 1; j <= 200; j++){
				}
		}
	}
	else if (tlacitko == 2){
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d118      	bne.n	8001160 <blikamLEDku+0x84>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 800112e:	2120      	movs	r1, #32
 8001130:	4829      	ldr	r0, [pc, #164]	; (80011d8 <blikamLEDku+0xfc>)
 8001132:	f7ff fb8d 	bl	8000850 <GPIO_ToggleBits>
		for (i = 1; i <= 400; i++){
 8001136:	2301      	movs	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	e00c      	b.n	8001156 <blikamLEDku+0x7a>
			for (j = 1; j <= 400; j++){
 800113c:	2301      	movs	r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	e002      	b.n	8001148 <blikamLEDku+0x6c>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	3301      	adds	r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800114e:	ddf8      	ble.n	8001142 <blikamLEDku+0x66>
				}
		}
	}
	else if (tlacitko == 2){
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
		for (i = 1; i <= 400; i++){
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800115c:	ddee      	ble.n	800113c <blikamLEDku+0x60>
		for (i = 1; i <= 1000; i++){
			for (j = 1; j <= 1000; j++){
			}
		}
	}
}
 800115e:	e036      	b.n	80011ce <blikamLEDku+0xf2>
		for (i = 1; i <= 400; i++){
			for (j = 1; j <= 400; j++){
				}
		}
	}
	else if (tlacitko == 3){
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d118      	bne.n	8001198 <blikamLEDku+0xbc>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 8001166:	2120      	movs	r1, #32
 8001168:	481b      	ldr	r0, [pc, #108]	; (80011d8 <blikamLEDku+0xfc>)
 800116a:	f7ff fb71 	bl	8000850 <GPIO_ToggleBits>
		for (i = 1; i <= 700; i++){
 800116e:	2301      	movs	r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	e00c      	b.n	800118e <blikamLEDku+0xb2>
			for (j = 1; j <= 700; j++){
 8001174:	2301      	movs	r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	e002      	b.n	8001180 <blikamLEDku+0xa4>
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3301      	adds	r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001186:	ddf8      	ble.n	800117a <blikamLEDku+0x9e>
				}
		}
	}
	else if (tlacitko == 3){
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
		for (i = 1; i <= 700; i++){
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3301      	adds	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001194:	ddee      	ble.n	8001174 <blikamLEDku+0x98>
		for (i = 1; i <= 1000; i++){
			for (j = 1; j <= 1000; j++){
			}
		}
	}
}
 8001196:	e01a      	b.n	80011ce <blikamLEDku+0xf2>
		for (i = 1; i <= 700; i++){
			for (j = 1; j <= 700; j++){
				}
		}
	}
	else if (tlacitko == 4){
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b04      	cmp	r3, #4
 800119c:	d117      	bne.n	80011ce <blikamLEDku+0xf2>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 800119e:	2120      	movs	r1, #32
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <blikamLEDku+0xfc>)
 80011a2:	f7ff fb55 	bl	8000850 <GPIO_ToggleBits>
		for (i = 1; i <= 1000; i++){
 80011a6:	2301      	movs	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e00c      	b.n	80011c6 <blikamLEDku+0xea>
			for (j = 1; j <= 1000; j++){
 80011ac:	2301      	movs	r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	e002      	b.n	80011b8 <blikamLEDku+0xdc>
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011be:	ddf8      	ble.n	80011b2 <blikamLEDku+0xd6>
				}
		}
	}
	else if (tlacitko == 4){
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
		for (i = 1; i <= 1000; i++){
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3301      	adds	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011cc:	ddee      	ble.n	80011ac <blikamLEDku+0xd0>
			for (j = 1; j <= 1000; j++){
			}
		}
	}
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40020000 	.word	0x40020000

080011dc <__libc_init_array>:
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <__libc_init_array+0x3c>)
 80011de:	b570      	push	{r4, r5, r6, lr}
 80011e0:	461e      	mov	r6, r3
 80011e2:	4c0e      	ldr	r4, [pc, #56]	; (800121c <__libc_init_array+0x40>)
 80011e4:	2500      	movs	r5, #0
 80011e6:	1ae4      	subs	r4, r4, r3
 80011e8:	10a4      	asrs	r4, r4, #2
 80011ea:	42a5      	cmp	r5, r4
 80011ec:	d004      	beq.n	80011f8 <__libc_init_array+0x1c>
 80011ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011f2:	4798      	blx	r3
 80011f4:	3501      	adds	r5, #1
 80011f6:	e7f8      	b.n	80011ea <__libc_init_array+0xe>
 80011f8:	f000 f816 	bl	8001228 <_init>
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <__libc_init_array+0x44>)
 80011fe:	4c09      	ldr	r4, [pc, #36]	; (8001224 <__libc_init_array+0x48>)
 8001200:	461e      	mov	r6, r3
 8001202:	1ae4      	subs	r4, r4, r3
 8001204:	10a4      	asrs	r4, r4, #2
 8001206:	2500      	movs	r5, #0
 8001208:	42a5      	cmp	r5, r4
 800120a:	d004      	beq.n	8001216 <__libc_init_array+0x3a>
 800120c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001210:	4798      	blx	r3
 8001212:	3501      	adds	r5, #1
 8001214:	e7f8      	b.n	8001208 <__libc_init_array+0x2c>
 8001216:	bd70      	pop	{r4, r5, r6, pc}
 8001218:	08001240 	.word	0x08001240
 800121c:	08001240 	.word	0x08001240
 8001220:	08001240 	.word	0x08001240
 8001224:	08001244 	.word	0x08001244

08001228 <_init>:
 8001228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122a:	bf00      	nop
 800122c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800122e:	bc08      	pop	{r3}
 8001230:	469e      	mov	lr, r3
 8001232:	4770      	bx	lr

08001234 <_fini>:
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001236:	bf00      	nop
 8001238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123a:	bc08      	pop	{r3}
 800123c:	469e      	mov	lr, r3
 800123e:	4770      	bx	lr
