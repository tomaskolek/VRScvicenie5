
vrs_cv5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001fe0  08001fe0  00011fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001ff0  08001ff0  00011ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ff4  08001ff4  00011ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08001ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000028  2000001c  08002014  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000044  08002014  00020044  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004be6  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ec8  00000000  00000000  00024c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005f8  00000000  00000000  00025af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000550  00000000  00000000  000260f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002184  00000000  00000000  00026640  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000209d  00000000  00000000  000287c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002a861  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001888  00000000  00000000  0002a8e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002c168  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000001c 	.word	0x2000001c
 800015c:	00000000 	.word	0x00000000
 8000160:	08001fc8 	.word	0x08001fc8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000020 	.word	0x20000020
 800017c:	08001fc8 	.word	0x08001fc8

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	bf14      	ite	ne
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e720      	b.n	80002c4 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aedc 	beq.w	8000272 <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6c1      	b.n	8000272 <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
  *                                0 bits for subpriority.
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800091c:	4a05      	ldr	r2, [pc, #20]	; (8000934 <NVIC_PriorityGroupConfig+0x20>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	60d3      	str	r3, [r2, #12]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	2300      	movs	r3, #0
 8000946:	73bb      	strb	r3, [r7, #14]
 8000948:	230f      	movs	r3, #15
 800094a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	78db      	ldrb	r3, [r3, #3]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d038      	beq.n	80009c6 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <NVIC_Init+0xb8>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	43db      	mvns	r3, r3
 800095a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800095e:	0a1b      	lsrs	r3, r3, #8
 8000960:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	f1c3 0304 	rsb	r3, r3, #4
 8000968:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800096a:	7b7a      	ldrb	r2, [r7, #13]
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	fa42 f303 	asr.w	r3, r2, r3
 8000972:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	785b      	ldrb	r3, [r3, #1]
 8000978:	461a      	mov	r2, r3
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	789a      	ldrb	r2, [r3, #2]
 8000986:	7b7b      	ldrb	r3, [r7, #13]
 8000988:	4013      	ands	r3, r2
 800098a:	b2da      	uxtb	r2, r3
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	4313      	orrs	r3, r2
 8000990:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	011b      	lsls	r3, r3, #4
 8000996:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000998:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <NVIC_Init+0xbc>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	7bfa      	ldrb	r2, [r7, #15]
 80009a2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009a6:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <NVIC_Init+0xbc>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	095b      	lsrs	r3, r3, #5
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	f003 031f 	and.w	r3, r3, #31
 80009ba:	2101      	movs	r1, #1
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009c0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80009c4:	e00f      	b.n	80009e6 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009c6:	490b      	ldr	r1, [pc, #44]	; (80009f4 <NVIC_Init+0xbc>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	095b      	lsrs	r3, r3, #5
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	f003 031f 	and.w	r3, r3, #31
 80009da:	2201      	movs	r2, #1
 80009dc:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009de:	f100 0320 	add.w	r3, r0, #32
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00
 80009f4:	e000e100 	.word	0xe000e100

080009f8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000a16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a1a:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	791b      	ldrb	r3, [r3, #4]
 8000a20:	021a      	lsls	r2, r3, #8
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <ADC_Init+0xa4>)
 8000a3e:	4013      	ands	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	691a      	ldr	r2, [r3, #16]
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000a50:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	795b      	ldrb	r3, [r3, #5]
 8000a56:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 8000a72:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	7d1b      	ldrb	r3, [r3, #20]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	7afb      	ldrb	r3, [r7, #11]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000a82:	7afb      	ldrb	r3, [r7, #11]
 8000a84:	051b      	lsls	r3, r3, #20
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	c0fff7fd 	.word	0xc0fff7fd

08000aa0 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000ac6:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	751a      	strb	r2, [r3, #20]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d006      	beq.n	8000b00 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	f043 0201 	orr.w	r2, r3, #1
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000afe:	e005      	b.n	8000b0c <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f023 0201 	bic.w	r2, r3, #1
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	4608      	mov	r0, r1
 8000b22:	4611      	mov	r1, r2
 8000b24:	461a      	mov	r2, r3
 8000b26:	4603      	mov	r3, r0
 8000b28:	70fb      	strb	r3, [r7, #3]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	70bb      	strb	r3, [r7, #2]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	2b1d      	cmp	r3, #29
 8000b3e:	d923      	bls.n	8000b88 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b44:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 8000b46:	78fb      	ldrb	r3, [r7, #3]
 8000b48:	f1a3 021e 	sub.w	r2, r3, #30
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	4413      	add	r3, r2
 8000b52:	2207      	movs	r2, #7
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 8000b64:	7879      	ldrb	r1, [r7, #1]
 8000b66:	78fb      	ldrb	r3, [r7, #3]
 8000b68:	f1a3 021e 	sub.w	r2, r3, #30
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	65da      	str	r2, [r3, #92]	; 0x5c
 8000b86:	e06c      	b.n	8000c62 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	2b13      	cmp	r3, #19
 8000b8c:	d923      	bls.n	8000bd6 <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	f1a3 0214 	sub.w	r2, r3, #20
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	43db      	mvns	r3, r3
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 8000bb2:	7879      	ldrb	r1, [r7, #1]
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	f1a3 0214 	sub.w	r2, r3, #20
 8000bba:	4613      	mov	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	4413      	add	r3, r2
 8000bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc4:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	e045      	b.n	8000c62 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	2b09      	cmp	r3, #9
 8000bda:	d923      	bls.n	8000c24 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	f1a3 020a 	sub.w	r2, r3, #10
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	2207      	movs	r2, #7
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000c00:	7879      	ldrb	r1, [r7, #1]
 8000c02:	78fb      	ldrb	r3, [r7, #3]
 8000c04:	f1a3 020a 	sub.w	r2, r3, #10
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	e01e      	b.n	8000c62 <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 8000c2a:	78fa      	ldrb	r2, [r7, #3]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4413      	add	r3, r2
 8000c32:	2207      	movs	r2, #7
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	4013      	ands	r3, r2
 8000c42:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000c44:	7879      	ldrb	r1, [r7, #1]
 8000c46:	78fa      	ldrb	r2, [r7, #3]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4413      	add	r3, r2
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000c62:	78bb      	ldrb	r3, [r7, #2]
 8000c64:	2b06      	cmp	r3, #6
 8000c66:	d821      	bhi.n	8000cac <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 8000c6e:	78bb      	ldrb	r3, [r7, #2]
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	221f      	movs	r2, #31
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	43db      	mvns	r3, r3
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	4013      	ands	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000c8a:	78f9      	ldrb	r1, [r7, #3]
 8000c8c:	78bb      	ldrb	r3, [r7, #2]
 8000c8e:	1e5a      	subs	r2, r3, #1
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000caa:	e095      	b.n	8000dd8 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000cac:	78bb      	ldrb	r3, [r7, #2]
 8000cae:	2b0c      	cmp	r3, #12
 8000cb0:	d821      	bhi.n	8000cf6 <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 8000cb8:	78bb      	ldrb	r3, [r7, #2]
 8000cba:	1fda      	subs	r2, r3, #7
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	221f      	movs	r2, #31
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000cd4:	78f9      	ldrb	r1, [r7, #3]
 8000cd6:	78bb      	ldrb	r3, [r7, #2]
 8000cd8:	1fda      	subs	r2, r3, #7
 8000cda:	4613      	mov	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce4:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000cf4:	e070      	b.n	8000dd8 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 8000cf6:	78bb      	ldrb	r3, [r7, #2]
 8000cf8:	2b12      	cmp	r3, #18
 8000cfa:	d823      	bhi.n	8000d44 <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d00:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 8000d02:	78bb      	ldrb	r3, [r7, #2]
 8000d04:	f1a3 020d 	sub.w	r2, r3, #13
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	221f      	movs	r2, #31
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000d20:	78f9      	ldrb	r1, [r7, #3]
 8000d22:	78bb      	ldrb	r3, [r7, #2]
 8000d24:	f1a3 020d 	sub.w	r2, r3, #13
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000d42:	e049      	b.n	8000dd8 <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 8000d44:	78bb      	ldrb	r3, [r7, #2]
 8000d46:	2b18      	cmp	r3, #24
 8000d48:	d823      	bhi.n	8000d92 <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 8000d50:	78bb      	ldrb	r3, [r7, #2]
 8000d52:	f1a3 0213 	sub.w	r2, r3, #19
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	221f      	movs	r2, #31
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 8000d6e:	78f9      	ldrb	r1, [r7, #3]
 8000d70:	78bb      	ldrb	r3, [r7, #2]
 8000d72:	f1a3 0213 	sub.w	r2, r3, #19
 8000d76:	4613      	mov	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000d90:	e022      	b.n	8000dd8 <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 8000d98:	78bb      	ldrb	r3, [r7, #2]
 8000d9a:	f1a3 0219 	sub.w	r2, r3, #25
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	221f      	movs	r2, #31
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	68fa      	ldr	r2, [r7, #12]
 8000db2:	4013      	ands	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 8000db6:	78f9      	ldrb	r1, [r7, #3]
 8000db8:	78bb      	ldrb	r3, [r7, #2]
 8000dba:	f1a3 0219 	sub.w	r2, r3, #25
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	609a      	str	r2, [r3, #8]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e10:	b29b      	uxth	r3, r3
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8000e30:	887b      	ldrh	r3, [r7, #2]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8000e36:	2201      	movs	r2, #1
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8000e40:	787b      	ldrb	r3, [r7, #1]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d006      	beq.n	8000e54 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 8000e52:	e006      	b.n	8000e62 <ADC_ITConfig+0x46>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	605a      	str	r2, [r3, #4]
  }
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e001      	b.n	8000e92 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <ADC_ClearFlag>:
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *     @arg ADC_FLAG_OVR: overrun flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	601a      	str	r2, [r3, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt
  *     @arg ADC_IT_OVR: Overrun interrupt
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	73fb      	strb	r3, [r7, #15]

  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	43da      	mvns	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	e07e      	b.n	8001006 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d16d      	bne.n	8001000 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2103      	movs	r1, #3
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	401a      	ands	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	4619      	mov	r1, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	791b      	ldrb	r3, [r3, #4]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d003      	beq.n	8000f62 <GPIO_Init+0x76>
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d136      	bne.n	8000fd0 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	401a      	ands	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	795b      	ldrb	r3, [r3, #5]
 8000f80:	4619      	mov	r1, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	889b      	ldrh	r3, [r3, #4]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	889b      	ldrh	r3, [r3, #4]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	799b      	ldrb	r3, [r3, #6]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2103      	movs	r1, #3
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	79db      	ldrb	r3, [r3, #7]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	f67f af7d 	bls.w	8000f08 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800100e:	bf00      	nop
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	835a      	strh	r2, [r3, #26]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	8a9b      	ldrh	r3, [r3, #20]
 8001044:	b29a      	uxth	r2, r3
 8001046:	887b      	ldrh	r3, [r7, #2]
 8001048:	4053      	eors	r3, r2
 800104a:	b29a      	uxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	829a      	strh	r2, [r3, #20]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
 8001068:	4613      	mov	r3, r2
 800106a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001074:	787a      	ldrb	r2, [r7, #1]
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	08db      	lsrs	r3, r3, #3
 8001088:	b29b      	uxth	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	b29b      	uxth	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	210f      	movs	r1, #15
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	ea02 0103 	and.w	r1, r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f100 0208 	add.w	r2, r0, #8
 80010b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	08db      	lsrs	r3, r3, #3
 80010be:	b29b      	uxth	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	08db      	lsrs	r3, r3, #3
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <RCC_HSICmd+0x1c>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	42470000 	.word	0x42470000

0800110c <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800112c:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <RCC_GetClocksFreq+0x1a0>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	2b0c      	cmp	r3, #12
 800113a:	d865      	bhi.n	8001208 <RCC_GetClocksFreq+0xfc>
 800113c:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <RCC_GetClocksFreq+0x38>)
 800113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001142:	bf00      	nop
 8001144:	08001179 	.word	0x08001179
 8001148:	08001209 	.word	0x08001209
 800114c:	08001209 	.word	0x08001209
 8001150:	08001209 	.word	0x08001209
 8001154:	08001199 	.word	0x08001199
 8001158:	08001209 	.word	0x08001209
 800115c:	08001209 	.word	0x08001209
 8001160:	08001209 	.word	0x08001209
 8001164:	080011a1 	.word	0x080011a1
 8001168:	08001209 	.word	0x08001209
 800116c:	08001209 	.word	0x08001209
 8001170:	08001209 	.word	0x08001209
 8001174:	080011a9 	.word	0x080011a9
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001178:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <RCC_GetClocksFreq+0x1a0>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001180:	0b5b      	lsrs	r3, r3, #13
 8001182:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	3301      	adds	r3, #1
 8001188:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]
      break;
 8001196:	e047      	b.n	8001228 <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a45      	ldr	r2, [pc, #276]	; (80012b0 <RCC_GetClocksFreq+0x1a4>)
 800119c:	601a      	str	r2, [r3, #0]
      break;
 800119e:	e043      	b.n	8001228 <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a44      	ldr	r2, [pc, #272]	; (80012b4 <RCC_GetClocksFreq+0x1a8>)
 80011a4:	601a      	str	r2, [r3, #0]
      break;
 80011a6:	e03f      	b.n	8001228 <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80011a8:	4b40      	ldr	r3, [pc, #256]	; (80012ac <RCC_GetClocksFreq+0x1a0>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80011b0:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80011b2:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <RCC_GetClocksFreq+0x1a0>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80011ba:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	0c9b      	lsrs	r3, r3, #18
 80011c0:	4a3d      	ldr	r2, [pc, #244]	; (80012b8 <RCC_GetClocksFreq+0x1ac>)
 80011c2:	5cd3      	ldrb	r3, [r2, r3]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	0d9b      	lsrs	r3, r3, #22
 80011cc:	3301      	adds	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80011d0:	4b36      	ldr	r3, [pc, #216]	; (80012ac <RCC_GetClocksFreq+0x1a0>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d8:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d109      	bne.n	80011f4 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	4a33      	ldr	r2, [pc, #204]	; (80012b0 <RCC_GetClocksFreq+0x1a4>)
 80011e4:	fb02 f203 	mul.w	r2, r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 80011f2:	e019      	b.n	8001228 <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <RCC_GetClocksFreq+0x1a8>)
 80011f8:	fb02 f203 	mul.w	r2, r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	601a      	str	r2, [r3, #0]
      }
      break;
 8001206:	e00f      	b.n	8001228 <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <RCC_GetClocksFreq+0x1a0>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001210:	0b5b      	lsrs	r3, r3, #13
 8001212:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	3301      	adds	r3, #1
 8001218:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	461a      	mov	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
      break;
 8001226:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <RCC_GetClocksFreq+0x1a0>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001230:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 8001238:	4a20      	ldr	r2, [pc, #128]	; (80012bc <RCC_GetClocksFreq+0x1b0>)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	4413      	add	r3, r2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	40da      	lsrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <RCC_GetClocksFreq+0x1a0>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001258:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	0a1b      	lsrs	r3, r3, #8
 800125e:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001260:	4a16      	ldr	r2, [pc, #88]	; (80012bc <RCC_GetClocksFreq+0x1b0>)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	40da      	lsrs	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <RCC_GetClocksFreq+0x1a0>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001280:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	0adb      	lsrs	r3, r3, #11
 8001286:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8001288:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <RCC_GetClocksFreq+0x1b0>)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	40da      	lsrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	60da      	str	r2, [r3, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3724      	adds	r7, #36	; 0x24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	00f42400 	.word	0x00f42400
 80012b4:	007a1200 	.word	0x007a1200
 80012b8:	20000000 	.word	0x20000000
 80012bc:	2000000c 	.word	0x2000000c

080012c0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80012d2:	4909      	ldr	r1, [pc, #36]	; (80012f8 <RCC_AHBPeriphClockCmd+0x38>)
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <RCC_AHBPeriphClockCmd+0x38>)
 80012d6:	69da      	ldr	r2, [r3, #28]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80012de:	e006      	b.n	80012ee <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80012e0:	4905      	ldr	r1, [pc, #20]	; (80012f8 <RCC_AHBPeriphClockCmd+0x38>)
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <RCC_AHBPeriphClockCmd+0x38>)
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	4013      	ands	r3, r2
 80012ec:	61cb      	str	r3, [r1, #28]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	40023800 	.word	0x40023800

080012fc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800130e:	4909      	ldr	r1, [pc, #36]	; (8001334 <RCC_APB2PeriphClockCmd+0x38>)
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <RCC_APB2PeriphClockCmd+0x38>)
 8001312:	6a1a      	ldr	r2, [r3, #32]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4313      	orrs	r3, r2
 8001318:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800131a:	e006      	b.n	800132a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800131c:	4905      	ldr	r1, [pc, #20]	; (8001334 <RCC_APB2PeriphClockCmd+0x38>)
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <RCC_APB2PeriphClockCmd+0x38>)
 8001320:	6a1a      	ldr	r2, [r3, #32]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	43db      	mvns	r3, r3
 8001326:	4013      	ands	r3, r2
 8001328:	620b      	str	r3, [r1, #32]
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	40023800 	.word	0x40023800

08001338 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800134a:	4909      	ldr	r1, [pc, #36]	; (8001370 <RCC_APB1PeriphClockCmd+0x38>)
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <RCC_APB1PeriphClockCmd+0x38>)
 800134e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4313      	orrs	r3, r2
 8001354:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001356:	e006      	b.n	8001366 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001358:	4905      	ldr	r1, [pc, #20]	; (8001370 <RCC_APB1PeriphClockCmd+0x38>)
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <RCC_APB1PeriphClockCmd+0x38>)
 800135c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	43db      	mvns	r3, r3
 8001362:	4013      	ands	r3, r2
 8001364:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40023800 	.word	0x40023800

08001374 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	095b      	lsrs	r3, r3, #5
 800138e:	b2db      	uxtb	r3, r3
 8001390:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d103      	bne.n	80013a0 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <RCC_GetFlagStatus+0x60>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e002      	b.n	80013a6 <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <RCC_GetFlagStatus+0x60>)
 80013a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a4:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 031f 	and.w	r3, r3, #31
 80013ac:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	fa22 f303 	lsr.w	r3, r2, r3
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 80013be:	2301      	movs	r3, #1
 80013c0:	74fb      	strb	r3, [r7, #19]
 80013c2:	e001      	b.n	80013c8 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80013c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	371c      	adds	r7, #28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40023800 	.word	0x40023800

080013d8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	8a1b      	ldrh	r3, [r3, #16]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001400:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	88db      	ldrh	r3, [r3, #6]
 8001406:	461a      	mov	r2, r3
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	4313      	orrs	r3, r2
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	b29a      	uxth	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	899b      	ldrh	r3, [r3, #12]
 800141a:	b29b      	uxth	r3, r3
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001424:	f023 030c 	bic.w	r3, r3, #12
 8001428:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	889a      	ldrh	r2, [r3, #4]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	891b      	ldrh	r3, [r3, #8]
 8001432:	4313      	orrs	r3, r2
 8001434:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800143a:	4313      	orrs	r3, r2
 800143c:	b29b      	uxth	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	4313      	orrs	r3, r2
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	b29a      	uxth	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	8a9b      	ldrh	r3, [r3, #20]
 8001452:	b29b      	uxth	r3, r3
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800145c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	899b      	ldrh	r3, [r3, #12]
 8001462:	461a      	mov	r2, r3
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	4313      	orrs	r3, r2
 8001468:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	b29a      	uxth	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fe48 	bl	800110c <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a2e      	ldr	r2, [pc, #184]	; (8001538 <USART_Init+0x160>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d102      	bne.n	800148a <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	623b      	str	r3, [r7, #32]
 8001488:	e001      	b.n	800148e <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	899b      	ldrh	r3, [r3, #12]
 8001492:	b29b      	uxth	r3, r3
 8001494:	b21b      	sxth	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	da0c      	bge.n	80014b4 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800149a:	6a3a      	ldr	r2, [r7, #32]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	009a      	lsls	r2, r3, #2
 80014a4:	441a      	add	r2, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	e00b      	b.n	80014cc <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80014b4:	6a3a      	ldr	r2, [r7, #32]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	009a      	lsls	r2, r3, #2
 80014be:	441a      	add	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	4a1b      	ldr	r2, [pc, #108]	; (800153c <USART_Init+0x164>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	095b      	lsrs	r3, r3, #5
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	2264      	movs	r2, #100	; 0x64
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	899b      	ldrh	r3, [r3, #12]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da0c      	bge.n	8001510 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	3332      	adds	r3, #50	; 0x32
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <USART_Init+0x164>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150a:	4313      	orrs	r3, r2
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
 800150e:	e00b      	b.n	8001528 <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	3332      	adds	r3, #50	; 0x32
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <USART_Init+0x164>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	095b      	lsrs	r3, r3, #5
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001524:	4313      	orrs	r3, r2
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	b29a      	uxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	811a      	strh	r2, [r3, #8]
}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	; 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40013800 	.word	0x40013800
 800153c:	51eb851f 	.word	0x51eb851f

08001540 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	899b      	ldrh	r3, [r3, #12]
 8001556:	b29b      	uxth	r3, r3
 8001558:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800155c:	b29a      	uxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001562:	e007      	b.n	8001574 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	899b      	ldrh	r3, [r3, #12]
 8001568:	b29b      	uxth	r3, r3
 800156a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	819a      	strh	r2, [r3, #12]
  }
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001592:	b29a      	uxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	809a      	strh	r2, [r3, #4]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop

080015a4 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	889b      	ldrh	r3, [r3, #4]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b6:	b29b      	uxth	r3, r3
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop

080015c4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]
 80015d0:	4613      	mov	r3, r2
 80015d2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	095b      	lsrs	r3, r3, #5
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80015fa:	2201      	movs	r2, #1
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d103      	bne.n	8001612 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	330c      	adds	r3, #12
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	e009      	b.n	8001626 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d103      	bne.n	8001620 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3310      	adds	r3, #16
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	e002      	b.n	8001626 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3314      	adds	r3, #20
 8001624:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001626:	787b      	ldrb	r3, [r7, #1]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	6811      	ldr	r1, [r2, #0]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001638:	e006      	b.n	8001648 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	6811      	ldr	r1, [r2, #0]
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	43d2      	mvns	r2, r2
 8001644:	400a      	ands	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
  }
}
 8001648:	bf00      	nop
 800164a:	371c      	adds	r7, #28
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop

08001654 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	b29a      	uxth	r2, r3
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	4013      	ands	r3, r2
 800166e:	b29b      	uxth	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e001      	b.n	800167e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop

0800168c <USART_ClearITPendingBit>:
  * @note TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001698:	2300      	movs	r3, #0
 800169a:	81fb      	strh	r3, [r7, #14]
 800169c:	2300      	movs	r3, #0
 800169e:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	2201      	movs	r2, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80016b0:	89bb      	ldrh	r3, [r7, #12]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	801a      	strh	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	0000      	movs	r0, r0
	...

080016c8 <main>:
#include <stdio.h>

//#include <string.h>

int main(void)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
	nvic_init();
 80016ce:	f000 fafb 	bl	8001cc8 <nvic_init>
	gpio_init();
 80016d2:	f000 fa69 	bl	8001ba8 <gpio_init>
	adc_init();
 80016d6:	f000 faa3 	bl	8001c20 <adc_init>
	usart_init();
 80016da:	f000 fb19 	bl	8001d10 <usart_init>

	char naPoslanie[20];

	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 80016de:	2201      	movs	r2, #1
 80016e0:	f240 2105 	movw	r1, #517	; 0x205
 80016e4:	4822      	ldr	r0, [pc, #136]	; (8001770 <main+0xa8>)
 80016e6:	f7ff fb99 	bl	8000e1c <ADC_ITConfig>
	ADC_SoftwareStartConv(ADC1);
 80016ea:	4821      	ldr	r0, [pc, #132]	; (8001770 <main+0xa8>)
 80016ec:	f7ff fb7a 	bl	8000de4 <ADC_SoftwareStartConv>
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)){}
 80016f0:	bf00      	nop
 80016f2:	2102      	movs	r1, #2
 80016f4:	481e      	ldr	r0, [pc, #120]	; (8001770 <main+0xa8>)
 80016f6:	f7ff fbb9 	bl	8000e6c <ADC_GetFlagStatus>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f8      	beq.n	80016f2 <main+0x2a>
	ADC_ClearFlag(ADC1, ADC_FLAG_EOC);
 8001700:	2102      	movs	r1, #2
 8001702:	481b      	ldr	r0, [pc, #108]	; (8001770 <main+0xa8>)
 8001704:	f7ff fbcc 	bl	8000ea0 <ADC_ClearFlag>

	while (1)
	{
		for(int i = 0; i <= 10000; i++){
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e002      	b.n	8001714 <main+0x4c>
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f242 7210 	movw	r2, #10000	; 0x2710
 800171a:	4293      	cmp	r3, r2
 800171c:	ddf7      	ble.n	800170e <main+0x46>
		}
		if (pom == 1){
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <main+0xac>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d112      	bne.n	800174c <main+0x84>
			sprintf(naPoslanie,"%f\r\n", (3.3/4095)*AD_value);
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <main+0xb0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fe7a 	bl	8000424 <__aeabi_i2d>
 8001730:	a30d      	add	r3, pc, #52	; (adr r3, 8001768 <main+0xa0>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7fe fedb 	bl	80004f0 <__aeabi_dmul>
 800173a:	4603      	mov	r3, r0
 800173c:	460c      	mov	r4, r1
 800173e:	4638      	mov	r0, r7
 8001740:	461a      	mov	r2, r3
 8001742:	4623      	mov	r3, r4
 8001744:	490d      	ldr	r1, [pc, #52]	; (800177c <main+0xb4>)
 8001746:	f000 fa19 	bl	8001b7c <siprintf>
 800174a:	e006      	b.n	800175a <main+0x92>
		}
		else{
			sprintf(naPoslanie,"%i\r\n", AD_value);
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <main+0xb0>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	463b      	mov	r3, r7
 8001752:	490b      	ldr	r1, [pc, #44]	; (8001780 <main+0xb8>)
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fa11 	bl	8001b7c <siprintf>
		}
		posli_znak(naPoslanie);
 800175a:	463b      	mov	r3, r7
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fbe5 	bl	8001f2c <posli_znak>
	}
 8001762:	e7d1      	b.n	8001708 <main+0x40>
 8001764:	f3af 8000 	nop.w
 8001768:	e734d9b4 	.word	0xe734d9b4
 800176c:	3f4a680c 	.word	0x3f4a680c
 8001770:	40012400 	.word	0x40012400
 8001774:	20000040 	.word	0x20000040
 8001778:	20000038 	.word	0x20000038
 800177c:	08001fe0 	.word	0x08001fe0
 8001780:	08001fe8 	.word	0x08001fe8

08001784 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001788:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800178a:	e003      	b.n	8001794 <LoopCopyDataInit>

0800178c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 800178e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001790:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001792:	3104      	adds	r1, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8001798:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800179a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800179c:	d3f6      	bcc.n	800178c <CopyDataInit>
  ldr r2, =_sbss
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80017a0:	e002      	b.n	80017a8 <LoopFillZerobss>

080017a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80017a4:	f842 3b04 	str.w	r3, [r2], #4

080017a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <LoopFillZerobss+0x28>)
  cmp r2, r3
 80017aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017ac:	d3f9      	bcc.n	80017a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ae:	f000 f841 	bl	8001834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b2:	f000 fbe3 	bl	8001f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017b6:	f7ff ff87 	bl	80016c8 <main>
  bx lr
 80017ba:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017bc:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80017c0:	08001ff8 	.word	0x08001ff8
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017c8:	2000001c 	.word	0x2000001c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80017cc:	2000001c 	.word	0x2000001c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80017d0:	20000044 	.word	0x20000044

080017d4 <AES_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <AES_IRQHandler>
	...

080017d8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80017e8:	e7fe      	b.n	80017e8 <HardFault_Handler+0x4>
 80017ea:	bf00      	nop

080017ec <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>
 80017f2:	bf00      	nop

080017f4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80017f8:	e7fe      	b.n	80017f8 <BusFault_Handler+0x4>
 80017fa:	bf00      	nop

080017fc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001800:	e7fe      	b.n	8001800 <UsageFault_Handler+0x4>
 8001802:	bf00      	nop

08001804 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001838:	4a15      	ldr	r2, [pc, #84]	; (8001890 <SystemInit+0x5c>)
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <SystemInit+0x5c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001844:	4912      	ldr	r1, [pc, #72]	; (8001890 <SystemInit+0x5c>)
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <SystemInit+0x5c>)
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <SystemInit+0x60>)
 800184c:	4013      	ands	r3, r2
 800184e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001850:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <SystemInit+0x5c>)
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <SystemInit+0x5c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800185a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800185e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001860:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <SystemInit+0x5c>)
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <SystemInit+0x5c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800186c:	4a08      	ldr	r2, [pc, #32]	; (8001890 <SystemInit+0x5c>)
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <SystemInit+0x5c>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001876:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <SystemInit+0x5c>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800187e:	f000 f80d 	bl	800189c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <SystemInit+0x64>)
 8001884:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001888:	609a      	str	r2, [r3, #8]
#endif
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	88ffc00c 	.word	0x88ffc00c
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	2300      	movs	r3, #0
 80018a8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80018aa:	4a41      	ldr	r2, [pc, #260]	; (80019b0 <SetSysClock+0x114>)
 80018ac:	4b40      	ldr	r3, [pc, #256]	; (80019b0 <SetSysClock+0x114>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80018b6:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <SetSysClock+0x114>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3301      	adds	r3, #1
 80018c4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d103      	bne.n	80018d4 <SetSysClock+0x38>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80018d2:	d1f0      	bne.n	80018b6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80018d4:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <SetSysClock+0x114>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80018e0:	2301      	movs	r3, #1
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	e001      	b.n	80018ea <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d15a      	bne.n	80019a6 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 80018f0:	4a30      	ldr	r2, [pc, #192]	; (80019b4 <SetSysClock+0x118>)
 80018f2:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <SetSysClock+0x118>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f043 0304 	orr.w	r3, r3, #4
 80018fa:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80018fc:	4a2d      	ldr	r2, [pc, #180]	; (80019b4 <SetSysClock+0x118>)
 80018fe:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <SetSysClock+0x118>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001908:	4a2a      	ldr	r2, [pc, #168]	; (80019b4 <SetSysClock+0x118>)
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <SetSysClock+0x118>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001914:	4a26      	ldr	r2, [pc, #152]	; (80019b0 <SetSysClock+0x114>)
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <SetSysClock+0x114>)
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191e:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <SetSysClock+0x11c>)
 8001922:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001926:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001928:	bf00      	nop
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <SetSysClock+0x11c>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f9      	bne.n	800192a <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001936:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <SetSysClock+0x114>)
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <SetSysClock+0x114>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800193e:	4a1c      	ldr	r2, [pc, #112]	; (80019b0 <SetSysClock+0x114>)
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <SetSysClock+0x114>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001946:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <SetSysClock+0x114>)
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <SetSysClock+0x114>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <SetSysClock+0x114>)
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <SetSysClock+0x114>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001958:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 800195a:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <SetSysClock+0x114>)
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <SetSysClock+0x114>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001964:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <SetSysClock+0x114>)
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <SetSysClock+0x114>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001970:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001972:	bf00      	nop
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <SetSysClock+0x114>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f9      	beq.n	8001974 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <SetSysClock+0x114>)
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <SetSysClock+0x114>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f023 0303 	bic.w	r3, r3, #3
 800198a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 800198c:	4a08      	ldr	r2, [pc, #32]	; (80019b0 <SetSysClock+0x114>)
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <SetSysClock+0x114>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f043 0303 	orr.w	r3, r3, #3
 8001996:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001998:	bf00      	nop
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SetSysClock+0x114>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d1f9      	bne.n	800199a <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40023c00 	.word	0x40023c00
 80019b8:	40007000 	.word	0x40007000

080019bc <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	int div = 1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80019cc:	e004      	b.n	80019d8 <ts_itoa+0x1c>
		div *= base;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d2f3      	bcs.n	80019ce <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 80019e6:	e029      	b.n	8001a3c <ts_itoa+0x80>
	{
		int num = d/div;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f0:	613b      	str	r3, [r7, #16]
		d = d%div;
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80019fa:	fb02 f201 	mul.w	r2, r2, r1
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	60bb      	str	r3, [r7, #8]
		div /= base;
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	2b09      	cmp	r3, #9
 8001a10:	dd0a      	ble.n	8001a28 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	1c59      	adds	r1, r3, #1
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	6011      	str	r1, [r2, #0]
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	3237      	adds	r2, #55	; 0x37
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e009      	b.n	8001a3c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	1c59      	adds	r1, r3, #1
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	6011      	str	r1, [r2, #0]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	3230      	adds	r2, #48	; 0x30
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1d2      	bne.n	80019e8 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 8001a42:	bf00      	nop
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8001a5c:	e07d      	b.n	8001b5a <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b25      	cmp	r3, #37	; 0x25
 8001a64:	d171      	bne.n	8001b4a <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b64      	cmp	r3, #100	; 0x64
 8001a72:	d01e      	beq.n	8001ab2 <ts_formatstring+0x66>
 8001a74:	2b64      	cmp	r3, #100	; 0x64
 8001a76:	dc06      	bgt.n	8001a86 <ts_formatstring+0x3a>
 8001a78:	2b58      	cmp	r3, #88	; 0x58
 8001a7a:	d050      	beq.n	8001b1e <ts_formatstring+0xd2>
 8001a7c:	2b63      	cmp	r3, #99	; 0x63
 8001a7e:	d00e      	beq.n	8001a9e <ts_formatstring+0x52>
 8001a80:	2b25      	cmp	r3, #37	; 0x25
 8001a82:	d058      	beq.n	8001b36 <ts_formatstring+0xea>
 8001a84:	e05d      	b.n	8001b42 <ts_formatstring+0xf6>
 8001a86:	2b73      	cmp	r3, #115	; 0x73
 8001a88:	d02b      	beq.n	8001ae2 <ts_formatstring+0x96>
 8001a8a:	2b73      	cmp	r3, #115	; 0x73
 8001a8c:	dc02      	bgt.n	8001a94 <ts_formatstring+0x48>
 8001a8e:	2b69      	cmp	r3, #105	; 0x69
 8001a90:	d00f      	beq.n	8001ab2 <ts_formatstring+0x66>
 8001a92:	e056      	b.n	8001b42 <ts_formatstring+0xf6>
 8001a94:	2b75      	cmp	r3, #117	; 0x75
 8001a96:	d037      	beq.n	8001b08 <ts_formatstring+0xbc>
 8001a98:	2b78      	cmp	r3, #120	; 0x78
 8001a9a:	d040      	beq.n	8001b1e <ts_formatstring+0xd2>
 8001a9c:	e051      	b.n	8001b42 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	60fa      	str	r2, [r7, #12]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	1d11      	adds	r1, r2, #4
 8001aa8:	6079      	str	r1, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	701a      	strb	r2, [r3, #0]
				break;
 8001ab0:	e047      	b.n	8001b42 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	1d1a      	adds	r2, r3, #4
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da07      	bge.n	8001ad2 <ts_formatstring+0x86>
					{
						val *= -1;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	425b      	negs	r3, r3
 8001ac6:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	60fa      	str	r2, [r7, #12]
 8001ace:	222d      	movs	r2, #45	; 0x2d
 8001ad0:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8001ad2:	69f9      	ldr	r1, [r7, #28]
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	220a      	movs	r2, #10
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff6e 	bl	80019bc <ts_itoa>
				}
				break;
 8001ae0:	e02f      	b.n	8001b42 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	1d1a      	adds	r2, r3, #4
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8001aec:	e007      	b.n	8001afe <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	60fa      	str	r2, [r7, #12]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	1c51      	adds	r1, r2, #1
 8001af8:	61b9      	str	r1, [r7, #24]
 8001afa:	7812      	ldrb	r2, [r2, #0]
 8001afc:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f3      	bne.n	8001aee <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 8001b06:	e01c      	b.n	8001b42 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	1d1a      	adds	r2, r3, #4
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	6819      	ldr	r1, [r3, #0]
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	220a      	movs	r2, #10
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff50 	bl	80019bc <ts_itoa>
				break;
 8001b1c:	e011      	b.n	8001b42 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	1d1a      	adds	r2, r3, #4
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4619      	mov	r1, r3
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff44 	bl	80019bc <ts_itoa>
				break;
 8001b34:	e005      	b.n	8001b42 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	60fa      	str	r2, [r7, #12]
 8001b3c:	2225      	movs	r2, #37	; 0x25
 8001b3e:	701a      	strb	r2, [r3, #0]
				  break;
 8001b40:	bf00      	nop
			}
			fmt++;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3301      	adds	r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	e007      	b.n	8001b5a <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	60fa      	str	r2, [r7, #12]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	1c51      	adds	r1, r2, #1
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	7812      	ldrb	r2, [r2, #0]
 8001b58:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f47f af7d 	bne.w	8001a5e <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	1ad3      	subs	r3, r2, r3
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3720      	adds	r7, #32
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop

08001b7c <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8001b7c:	b40e      	push	{r1, r2, r3}
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8001b86:	f107 0320 	add.w	r3, r7, #32
 8001b8a:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	69f9      	ldr	r1, [r7, #28]
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff5b 	bl	8001a4c <ts_formatstring>
 8001b96:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8001b98:	68fb      	ldr	r3, [r7, #12]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ba4:	b003      	add	sp, #12
 8001ba6:	4770      	bx	lr

08001ba8 <gpio_init>:
 */
#include "vrs_cv5.h"
#include <stddef.h>
#include "stm32l1xx.h"

void gpio_init(){			// inicalizujem GPIO piny
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0

  	GPIO_InitTypeDef GPIO_InitStructure;

  	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001bae:	2101      	movs	r1, #1
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff fb85 	bl	80012c0 <RCC_AHBPeriphClockCmd>
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 ;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	603b      	str	r3, [r7, #0]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	713b      	strb	r3, [r7, #4]
  	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  	// LEDka//
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 ;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	603b      	str	r3, [r7, #0]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	713b      	strb	r3, [r7, #4]
  	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	71bb      	strb	r3, [r7, #6]
  	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	71fb      	strb	r3, [r7, #7]
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	717b      	strb	r3, [r7, #5]
  	//// USART2
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8001bd6:	230c      	movs	r3, #12
 8001bd8:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001be2:	2300      	movs	r3, #0
 8001be4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001be6:	2303      	movs	r3, #3
 8001be8:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001bea:	463b      	mov	r3, r7
 8001bec:	4619      	mov	r1, r3
 8001bee:	480b      	ldr	r0, [pc, #44]	; (8001c1c <gpio_init+0x74>)
 8001bf0:	f7ff f97c 	bl	8000eec <GPIO_Init>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2);
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	4808      	ldr	r0, [pc, #32]	; (8001c1c <gpio_init+0x74>)
 8001bfa:	f7ff fa2f 	bl	800105c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2);
 8001bfe:	2207      	movs	r2, #7
 8001c00:	2103      	movs	r1, #3
 8001c02:	4806      	ldr	r0, [pc, #24]	; (8001c1c <gpio_init+0x74>)
 8001c04:	f7ff fa2a 	bl	800105c <GPIO_PinAFConfig>
  		/////
  	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001c08:	463b      	mov	r3, r7
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4803      	ldr	r0, [pc, #12]	; (8001c1c <gpio_init+0x74>)
 8001c0e:	f7ff f96d 	bl	8000eec <GPIO_Init>

}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40020000 	.word	0x40020000

08001c20 <adc_init>:

void adc_init(void)			// inicalizujem ADC
  {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
  	RCC_HSICmd(ENABLE);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff fa60 	bl	80010ec <RCC_HSICmd>
  	ADC_InitTypeDef ADC_InitStructure;
  	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8001c2c:	bf00      	nop
 8001c2e:	2021      	movs	r0, #33	; 0x21
 8001c30:	f7ff fba0 	bl	8001374 <RCC_GetFlagStatus>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f9      	beq.n	8001c2e <adc_init+0xe>
  	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c40:	f7ff fb5c 	bl	80012fc <RCC_APB2PeriphClockCmd>
  	ADC_StructInit(&ADC_InitStructure);
 8001c44:	463b      	mov	r3, r7
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe ff2a 	bl	8000aa0 <ADC_StructInit>
  	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	603b      	str	r3, [r7, #0]
  	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	717b      	strb	r3, [r7, #5]
  	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]
  	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
  	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	753b      	strb	r3, [r7, #20]
  	ADC_Init(ADC1, &ADC_InitStructure);
 8001c60:	463b      	mov	r3, r7
 8001c62:	4619      	mov	r1, r3
 8001c64:	4817      	ldr	r0, [pc, #92]	; (8001cc4 <adc_init+0xa4>)
 8001c66:	f7fe fec7 	bl	80009f8 <ADC_Init>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_16Cycles);
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4814      	ldr	r0, [pc, #80]	; (8001cc4 <adc_init+0xa4>)
 8001c72:	f7fe ff51 	bl	8000b18 <ADC_RegularChannelConfig>
  	ADC_Cmd(ADC1, ENABLE);
 8001c76:	2101      	movs	r1, #1
 8001c78:	4812      	ldr	r0, [pc, #72]	; (8001cc4 <adc_init+0xa4>)
 8001c7a:	f7fe ff31 	bl	8000ae0 <ADC_Cmd>
  	ADC_ITConfig(ADC1,ADC_IT_EOC,ENABLE);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f240 2105 	movw	r1, #517	; 0x205
 8001c84:	480f      	ldr	r0, [pc, #60]	; (8001cc4 <adc_init+0xa4>)
 8001c86:	f7ff f8c9 	bl	8000e1c <ADC_ITConfig>
  	ADC_ITConfig(ADC1,ADC_IT_OVR,ENABLE);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f242 011a 	movw	r1, #8218	; 0x201a
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <adc_init+0xa4>)
 8001c92:	f7ff f8c3 	bl	8000e1c <ADC_ITConfig>
	ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC);
 8001c96:	2102      	movs	r1, #2
 8001c98:	480a      	ldr	r0, [pc, #40]	; (8001cc4 <adc_init+0xa4>)
 8001c9a:	f7ff f8e7 	bl	8000e6c <ADC_GetFlagStatus>
	ADC_GetFlagStatus(ADC1, ADC_FLAG_OVR);
 8001c9e:	2120      	movs	r1, #32
 8001ca0:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <adc_init+0xa4>)
 8001ca2:	f7ff f8e3 	bl	8000e6c <ADC_GetFlagStatus>
  	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET){}
 8001ca6:	bf00      	nop
 8001ca8:	2140      	movs	r1, #64	; 0x40
 8001caa:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <adc_init+0xa4>)
 8001cac:	f7ff f8de 	bl	8000e6c <ADC_GetFlagStatus>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f8      	beq.n	8001ca8 <adc_init+0x88>
  	ADC_SoftwareStartConv(ADC1);
 8001cb6:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <adc_init+0xa4>)
 8001cb8:	f7ff f894 	bl	8000de4 <ADC_SoftwareStartConv>
  }
 8001cbc:	bf00      	nop
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40012400 	.word	0x40012400

08001cc8 <nvic_init>:

void nvic_init(){			// inicializacia prerusenia pre ADC a USART2
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8001cce:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001cd2:	f7fe fe1f 	bl	8000914 <NVIC_PriorityGroupConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = ADC1_IRQn;
 8001cd6:	2312      	movs	r3, #18
 8001cd8:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fe25 	bl	8000938 <NVIC_Init>

	NVIC_InitTypeDef NVIC_InitStructure2;
	NVIC_InitStructure2.NVIC_IRQChannel = USART2_IRQn;
 8001cee:	2326      	movs	r3, #38	; 0x26
 8001cf0:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure2.NVIC_IRQChannelPreemptionPriority = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure2.NVIC_IRQChannelSubPriority = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure2.NVIC_IRQChannelCmd = ENABLE;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure2);
 8001cfe:	463b      	mov	r3, r7
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fe19 	bl	8000938 <NVIC_Init>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop

08001d10 <usart_init>:

void usart_init(){			// inicalizujem USART2
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8001d16:	2101      	movs	r1, #1
 8001d18:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001d1c:	f7ff fb0c 	bl	8001338 <RCC_APB1PeriphClockCmd>
	USART_InitTypeDef USART_struktura;
	USART_struktura.USART_BaudRate = 9600*2;
 8001d20:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8001d24:	603b      	str	r3, [r7, #0]
	USART_struktura.USART_WordLength = USART_WordLength_8b;
 8001d26:	2300      	movs	r3, #0
 8001d28:	80bb      	strh	r3, [r7, #4]
	USART_struktura.USART_StopBits = USART_StopBits_1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	80fb      	strh	r3, [r7, #6]
	USART_struktura.USART_Parity = USART_Parity_No;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	813b      	strh	r3, [r7, #8]
	USART_struktura.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001d32:	2300      	movs	r3, #0
 8001d34:	81bb      	strh	r3, [r7, #12]
	USART_struktura.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001d36:	230c      	movs	r3, #12
 8001d38:	817b      	strh	r3, [r7, #10]
	USART_Init(USART2, &USART_struktura);
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4808      	ldr	r0, [pc, #32]	; (8001d60 <usart_init+0x50>)
 8001d40:	f7ff fb4a 	bl	80013d8 <USART_Init>
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001d44:	2201      	movs	r2, #1
 8001d46:	f240 5125 	movw	r1, #1317	; 0x525
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <usart_init+0x50>)
 8001d4c:	f7ff fc3a 	bl	80015c4 <USART_ITConfig>
	USART_Cmd(USART2, ENABLE);
 8001d50:	2101      	movs	r1, #1
 8001d52:	4803      	ldr	r0, [pc, #12]	; (8001d60 <usart_init+0x50>)
 8001d54:	f7ff fbf4 	bl	8001540 <USART_Cmd>
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40004400 	.word	0x40004400

08001d64 <ADC1_IRQHandler>:

void ADC1_IRQHandler(void){		//handler k ADC
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	blikamLEDku();
 8001d68:	f000 f80a 	bl	8001d80 <blikamLEDku>
	ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 8001d6c:	f240 2105 	movw	r1, #517	; 0x205
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <ADC1_IRQHandler+0x18>)
 8001d72:	f7ff f8a5 	bl	8000ec0 <ADC_ClearITPendingBit>
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40012400 	.word	0x40012400

08001d80 <blikamLEDku>:

void blikamLEDku(){			//funkcia, ktora reprezentuje urovne napatia zmenou frekvencie blikania LED
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
	int i, j;
	uint16_t AD_value;

	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)){}
 8001d86:	bf00      	nop
 8001d88:	2102      	movs	r1, #2
 8001d8a:	4850      	ldr	r0, [pc, #320]	; (8001ecc <blikamLEDku+0x14c>)
 8001d8c:	f7ff f86e 	bl	8000e6c <ADC_GetFlagStatus>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f8      	beq.n	8001d88 <blikamLEDku+0x8>
	AD_value=ADC_GetConversionValue(ADC1);
 8001d96:	484d      	ldr	r0, [pc, #308]	; (8001ecc <blikamLEDku+0x14c>)
 8001d98:	f7ff f834 	bl	8000e04 <ADC_GetConversionValue>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	80fb      	strh	r3, [r7, #6]

		if ((AD_value >= 1980) && (AD_value <= 2100)){
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	f240 72bb 	movw	r2, #1979	; 0x7bb
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d91b      	bls.n	8001de2 <blikamLEDku+0x62>
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	f640 0234 	movw	r2, #2100	; 0x834
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d816      	bhi.n	8001de2 <blikamLEDku+0x62>
			GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 8001db4:	2120      	movs	r1, #32
 8001db6:	4846      	ldr	r0, [pc, #280]	; (8001ed0 <blikamLEDku+0x150>)
 8001db8:	f7ff f93c 	bl	8001034 <GPIO_ToggleBits>
			for (i = 1; i <= 200; i++){
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e00b      	b.n	8001dda <blikamLEDku+0x5a>
				for (j = 1; j <= 200; j++){
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	e002      	b.n	8001dce <blikamLEDku+0x4e>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2bc8      	cmp	r3, #200	; 0xc8
 8001dd2:	ddf9      	ble.n	8001dc8 <blikamLEDku+0x48>
	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)){}
	AD_value=ADC_GetConversionValue(ADC1);

		if ((AD_value >= 1980) && (AD_value <= 2100)){
			GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
			for (i = 1; i <= 200; i++){
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2bc8      	cmp	r3, #200	; 0xc8
 8001dde:	ddf0      	ble.n	8001dc2 <blikamLEDku+0x42>
	uint16_t AD_value;

	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)){}
	AD_value=ADC_GetConversionValue(ADC1);

		if ((AD_value >= 1980) && (AD_value <= 2100)){
 8001de0:	e06f      	b.n	8001ec2 <blikamLEDku+0x142>
			for (i = 1; i <= 200; i++){
				for (j = 1; j <= 200; j++){
					}
			}
		}
		else if ((AD_value >= 2800) && (AD_value <= 2940)){
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8001de8:	d31d      	bcc.n	8001e26 <blikamLEDku+0xa6>
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	f640 327c 	movw	r2, #2940	; 0xb7c
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d818      	bhi.n	8001e26 <blikamLEDku+0xa6>
			GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 8001df4:	2120      	movs	r1, #32
 8001df6:	4836      	ldr	r0, [pc, #216]	; (8001ed0 <blikamLEDku+0x150>)
 8001df8:	f7ff f91c 	bl	8001034 <GPIO_ToggleBits>
			for (i = 1; i <= 400; i++){
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	e00c      	b.n	8001e1c <blikamLEDku+0x9c>
				for (j = 1; j <= 400; j++){
 8001e02:	2301      	movs	r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	e002      	b.n	8001e0e <blikamLEDku+0x8e>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001e14:	ddf8      	ble.n	8001e08 <blikamLEDku+0x88>
					}
			}
		}
		else if ((AD_value >= 2800) && (AD_value <= 2940)){
			GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
			for (i = 1; i <= 400; i++){
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001e22:	ddee      	ble.n	8001e02 <blikamLEDku+0x82>
			for (i = 1; i <= 200; i++){
				for (j = 1; j <= 200; j++){
					}
			}
		}
		else if ((AD_value >= 2800) && (AD_value <= 2940)){
 8001e24:	e04d      	b.n	8001ec2 <blikamLEDku+0x142>
			for (i = 1; i <= 400; i++){
				for (j = 1; j <= 400; j++){
					}
			}
		}
		else if ((AD_value >= 3440) && (AD_value <= 3480)){
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	f5b3 6f57 	cmp.w	r3, #3440	; 0xd70
 8001e2c:	d31d      	bcc.n	8001e6a <blikamLEDku+0xea>
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	f640 5298 	movw	r2, #3480	; 0xd98
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d818      	bhi.n	8001e6a <blikamLEDku+0xea>
			GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 8001e38:	2120      	movs	r1, #32
 8001e3a:	4825      	ldr	r0, [pc, #148]	; (8001ed0 <blikamLEDku+0x150>)
 8001e3c:	f7ff f8fa 	bl	8001034 <GPIO_ToggleBits>
			for (i = 1; i <= 700; i++){
 8001e40:	2301      	movs	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e00c      	b.n	8001e60 <blikamLEDku+0xe0>
				for (j = 1; j <= 700; j++){
 8001e46:	2301      	movs	r3, #1
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	e002      	b.n	8001e52 <blikamLEDku+0xd2>
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001e58:	ddf8      	ble.n	8001e4c <blikamLEDku+0xcc>
					}
			}
		}
		else if ((AD_value >= 3440) && (AD_value <= 3480)){
			GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
			for (i = 1; i <= 700; i++){
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001e66:	ddee      	ble.n	8001e46 <blikamLEDku+0xc6>
			for (i = 1; i <= 400; i++){
				for (j = 1; j <= 400; j++){
					}
			}
		}
		else if ((AD_value >= 3440) && (AD_value <= 3480)){
 8001e68:	e02b      	b.n	8001ec2 <blikamLEDku+0x142>
			for (i = 1; i <= 700; i++){
				for (j = 1; j <= 700; j++){
					}
			}
		}
		else if ((AD_value >= 3640) && (AD_value <= 3680)){
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	f640 6237 	movw	r2, #3639	; 0xe37
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d91c      	bls.n	8001eae <blikamLEDku+0x12e>
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	f5b3 6f66 	cmp.w	r3, #3680	; 0xe60
 8001e7a:	d818      	bhi.n	8001eae <blikamLEDku+0x12e>
			GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 8001e7c:	2120      	movs	r1, #32
 8001e7e:	4814      	ldr	r0, [pc, #80]	; (8001ed0 <blikamLEDku+0x150>)
 8001e80:	f7ff f8d8 	bl	8001034 <GPIO_ToggleBits>
			for (i = 1; i <= 1000; i++){
 8001e84:	2301      	movs	r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	e00c      	b.n	8001ea4 <blikamLEDku+0x124>
				for (j = 1; j <= 1000; j++){
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	e002      	b.n	8001e96 <blikamLEDku+0x116>
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	3301      	adds	r3, #1
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e9c:	ddf8      	ble.n	8001e90 <blikamLEDku+0x110>
					}
			}
		}
		else if ((AD_value >= 3640) && (AD_value <= 3680)){
			GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
			for (i = 1; i <= 1000; i++){
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eaa:	ddee      	ble.n	8001e8a <blikamLEDku+0x10a>
			for (i = 1; i <= 700; i++){
				for (j = 1; j <= 700; j++){
					}
			}
		}
		else if ((AD_value >= 3640) && (AD_value <= 3680)){
 8001eac:	e009      	b.n	8001ec2 <blikamLEDku+0x142>
			for (i = 1; i <= 1000; i++){
				for (j = 1; j <= 1000; j++){
				}
			}
		}
		else if ((AD_value >= 3900)){
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	f640 723b 	movw	r2, #3899	; 0xf3b
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d904      	bls.n	8001ec2 <blikamLEDku+0x142>
			GPIO_ResetBits(GPIOA, GPIO_Pin_5);
 8001eb8:	2120      	movs	r1, #32
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <blikamLEDku+0x150>)
 8001ebc:	f7ff f8ac 	bl	8001018 <GPIO_ResetBits>
		}

}
 8001ec0:	e7ff      	b.n	8001ec2 <blikamLEDku+0x142>
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40012400 	.word	0x40012400
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){		// handler k USART2
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	if(USART_GetFlagStatus(USART2,USART_FLAG_RXNE)){
 8001ed8:	2120      	movs	r1, #32
 8001eda:	4811      	ldr	r0, [pc, #68]	; (8001f20 <USART2_IRQHandler+0x4c>)
 8001edc:	f7ff fbba 	bl	8001654 <USART_GetFlagStatus>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d01a      	beq.n	8001f1c <USART2_IRQHandler+0x48>
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8001ee6:	f240 5125 	movw	r1, #1317	; 0x525
 8001eea:	480d      	ldr	r0, [pc, #52]	; (8001f20 <USART2_IRQHandler+0x4c>)
 8001eec:	f7ff fbce 	bl	800168c <USART_ClearITPendingBit>
		data = USART_ReceiveData(USART2);
 8001ef0:	480b      	ldr	r0, [pc, #44]	; (8001f20 <USART2_IRQHandler+0x4c>)
 8001ef2:	f7ff fb57 	bl	80015a4 <USART_ReceiveData>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <USART2_IRQHandler+0x50>)
 8001efc:	701a      	strb	r2, [r3, #0]
		if (data == 'm'){
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <USART2_IRQHandler+0x50>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b6d      	cmp	r3, #109	; 0x6d
 8001f04:	d10a      	bne.n	8001f1c <USART2_IRQHandler+0x48>
				if (pom == 1){
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <USART2_IRQHandler+0x54>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d103      	bne.n	8001f16 <USART2_IRQHandler+0x42>
					pom = 0;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <USART2_IRQHandler+0x54>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
				else{
					pom = 1;
				}
		}
	}
}
 8001f14:	e002      	b.n	8001f1c <USART2_IRQHandler+0x48>
		if (data == 'm'){
				if (pom == 1){
					pom = 0;
				}
				else{
					pom = 1;
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <USART2_IRQHandler+0x54>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
				}
		}
	}
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40004400 	.word	0x40004400
 8001f24:	2000003c 	.word	0x2000003c
 8001f28:	20000040 	.word	0x20000040

08001f2c <posli_znak>:

void posli_znak(char znak[]){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
	while(znak[i] != 0){
 8001f38:	e013      	b.n	8001f62 <posli_znak+0x36>
		USART_SendData(USART2, (char) znak[i]);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4619      	mov	r1, r3
 8001f46:	480c      	ldr	r0, [pc, #48]	; (8001f78 <posli_znak+0x4c>)
 8001f48:	f7ff fb1a 	bl	8001580 <USART_SendData>
		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 8001f4c:	bf00      	nop
 8001f4e:	2140      	movs	r1, #64	; 0x40
 8001f50:	4809      	ldr	r0, [pc, #36]	; (8001f78 <posli_znak+0x4c>)
 8001f52:	f7ff fb7f 	bl	8001654 <USART_GetFlagStatus>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f8      	beq.n	8001f4e <posli_znak+0x22>
		i++;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
	}
}

void posli_znak(char znak[]){
	int i = 0;
	while(znak[i] != 0){
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4413      	add	r3, r2
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1e5      	bne.n	8001f3a <posli_znak+0xe>
		USART_SendData(USART2, (char) znak[i]);
		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
		i++;
	}
}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40004400 	.word	0x40004400

08001f7c <__libc_init_array>:
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <__libc_init_array+0x3c>)
 8001f7e:	b570      	push	{r4, r5, r6, lr}
 8001f80:	461e      	mov	r6, r3
 8001f82:	4c0e      	ldr	r4, [pc, #56]	; (8001fbc <__libc_init_array+0x40>)
 8001f84:	2500      	movs	r5, #0
 8001f86:	1ae4      	subs	r4, r4, r3
 8001f88:	10a4      	asrs	r4, r4, #2
 8001f8a:	42a5      	cmp	r5, r4
 8001f8c:	d004      	beq.n	8001f98 <__libc_init_array+0x1c>
 8001f8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f92:	4798      	blx	r3
 8001f94:	3501      	adds	r5, #1
 8001f96:	e7f8      	b.n	8001f8a <__libc_init_array+0xe>
 8001f98:	f000 f816 	bl	8001fc8 <_init>
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <__libc_init_array+0x44>)
 8001f9e:	4c09      	ldr	r4, [pc, #36]	; (8001fc4 <__libc_init_array+0x48>)
 8001fa0:	461e      	mov	r6, r3
 8001fa2:	1ae4      	subs	r4, r4, r3
 8001fa4:	10a4      	asrs	r4, r4, #2
 8001fa6:	2500      	movs	r5, #0
 8001fa8:	42a5      	cmp	r5, r4
 8001faa:	d004      	beq.n	8001fb6 <__libc_init_array+0x3a>
 8001fac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fb0:	4798      	blx	r3
 8001fb2:	3501      	adds	r5, #1
 8001fb4:	e7f8      	b.n	8001fa8 <__libc_init_array+0x2c>
 8001fb6:	bd70      	pop	{r4, r5, r6, pc}
 8001fb8:	08001ff0 	.word	0x08001ff0
 8001fbc:	08001ff0 	.word	0x08001ff0
 8001fc0:	08001ff0 	.word	0x08001ff0
 8001fc4:	08001ff4 	.word	0x08001ff4

08001fc8 <_init>:
 8001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fca:	bf00      	nop
 8001fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fce:	bc08      	pop	{r3}
 8001fd0:	469e      	mov	lr, r3
 8001fd2:	4770      	bx	lr

08001fd4 <_fini>:
 8001fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd6:	bf00      	nop
 8001fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fda:	bc08      	pop	{r3}
 8001fdc:	469e      	mov	lr, r3
 8001fde:	4770      	bx	lr
