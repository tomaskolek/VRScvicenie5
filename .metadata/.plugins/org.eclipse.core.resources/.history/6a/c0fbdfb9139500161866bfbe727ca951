/*
 * vrs_cv.c
 *
 *  Created on: 18. 10. 2016
 *      Author: tomas
 */
#include "vrs_cv5.h"
#include <stddef.h>
#include "stm32l1xx.h"


void blikamLEDku(int tlacitko){
	int i,j;
	if (tlacitko == 0){
		GPIO_ResetBits(GPIOA, GPIO_Pin_5);
	}
	else if (tlacitko == 1){
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
		for (i = 1; i <= 200; i++){
			for (j = 1; j <= 200; j++){
				}
		}
	}
	else if (tlacitko == 2){
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
		for (i = 1; i <= 400; i++){
			for (j = 1; j <= 400; j++){
				}
		}
	}
	else if (tlacitko == 3){
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
		for (i = 1; i <= 700; i++){
			for (j = 1; j <= 700; j++){
				}
		}
	}
	else if (tlacitko == 4){
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
		for (i = 1; i <= 1000; i++){
			for (j = 1; j <= 1000; j++){
				}
		}
	}
}

void adc_init(void)			// inicalizujem ADC a GPIO
  {
  	GPIO_InitTypeDef GPIO_InitStructure;
  	ADC_InitTypeDef ADC_InitStructure;

  	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 ;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
  	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  	// LEDka//
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 ;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
  	////
  	GPIO_Init(GPIOA, &GPIO_InitStructure);
  	RCC_HSICmd(ENABLE);
  	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
  	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
  	ADC_StructInit(&ADC_InitStructure);
  	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
  	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
  	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
  	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  	ADC_InitStructure.ADC_NbrOfConversion = 1;
  	ADC_Init(ADC1, &ADC_InitStructure);
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_16Cycles);
  	ADC_Cmd(ADC1, ENABLE);
  	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET){}
  	ADC_SoftwareStartConv(ADC1);
// dtruktura prerusenia //////////////////////////////////
  	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
  	NVIC_InitTypeDef NVIC_InitStructure;
  	NVIC_InitStructure.NVIC_IRQChannel = ADC1_IRQn;
  	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
  	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  	NVIC_Init(&NVIC_InitStructure);
  	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
  }

void USART_IRQ_init(void){
	NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannel = USART1_IRQn;
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStruct);
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
}

void USART_init(){

	GPIO_InitTypeDef      GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
	USART_InitStructure.USART_BaudRate = 9600;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_Init(USART1, &USART_InitStructure);
	USART_Cmd(USART1, ENABLE);
}

void USART1_IRQHandler(void)
{
	static i=0, size=5, mode=0;
	static uint8_t buffer[]={"2.93V"};
	if(USART1->SR & USART_FLAG_RXNE){
		if(USART_ReceiveData(USART1) == 'm')
			mode = !mode;
		USART_ClearFlag(USART1, USART_FLAG_RXNE);
	}
	if(USART1->SR & USART_FLAG_TC){
		if(i==0){
			if(mode == 0){
				buffer[0] = value/1000  + '0';
				buffer[1] = (value/100) % 10  + '0';
				buffer[2] = (value/10) % 10  + '0';
				buffer[3] = value % 10  + '0';
				size = 4;
			}
			else{
				uint32_t tmp = (330000 * value)/4095; // tmp je volt * 10^-5
				buffer[0] = (tmp/100000) + '0';
				buffer[1] = ',';
				buffer[2] = (tmp/10000) % 10  + '0';
				buffer[3] = (tmp/1000) % 10  + '0';
				buffer[4] = 'V';
				size = 5;
			}

		}
		USART_ClearFlag(USART1, USART_FLAG_TC);
		USART_SendData(USART1, buffer[i]);
		i++;
		if(i>=size)i=0;
	}
}

void ADC1_IRQHandler(void)
{
	if(ADC1->SR & ADC_SR_EOC){
		value = ADC1->DR;
		//ADC_ClearFlag(ADC1, ADC_FLAG_EOC);
	}


}
